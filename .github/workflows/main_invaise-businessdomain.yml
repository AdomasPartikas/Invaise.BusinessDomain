name: Build, Analyze, and Deploy ASP.Net Core app to Azure Web App - Invaise-BusinessDomain

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
# ──────────────────────────────────────────────
# BUILD + TEST + PACKAGE
# ──────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up .NET SDK 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Install SonarScanner for .NET
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Sonar – begin
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner begin \
          /k:"AdomasPartikas_Invaise.BusinessDomain" \
          /o:"adomaspartikas" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.coverageReportPaths="coverage.cobertura.xml" \
          /d:sonar.exclusions="coverage-report/**,**/bin/**,**/obj/**,**/TestResults/**,**/publish/**,**/*.dll,**/*.exe,**/*.pdb,**/APIClients/**,**/Migrations/**,**/Properties/**,**/Data/**"

    - name: Build API (Release)
      run: dotnet build src/Invaise.BusinessDomain.API.csproj -c Release

    # ── UNIT TESTS + COVERAGE ─────────────────
    - name: Run tests and collect coverage
      run: |
        dotnet test Tests/Invaise.BusinessDomain.Test.Unit/Invaise.BusinessDomain.Test.Unit.csproj \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults

    # Locate the file that Coverlet just created
    - name: Locate coverage report
      id: cov
      run: |
        COV=$(find TestResults -type f -name 'coverage.cobertura.xml' | head -n 1)
        echo "Found: $COV"
        cp "$COV" coverage.cobertura.xml

    # ── END SONAR ANALYSIS (pass exact path) ────────────────
    - name: Sonar – end & upload
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end

    # ── PUBLISH ───────────────────────────────
    - name: Publish API
      run: dotnet publish src/Invaise.BusinessDomain.API.csproj -c Release -o ./publish

    - name: Upload artefact for deployment
      uses: actions/upload-artifact@v4
      with:
        name: api-publish
        path: ./publish

# ──────────────────────────────────────────────
# DEPLOY (only on master)
# ──────────────────────────────────────────────
  deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: Production
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Download build artefact
      uses: actions/download-artifact@v4
      with:
        name: api-publish

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_4FCA156C19EB464D9C41128192C3170B }}
        tenant-id:  ${{ secrets.AZUREAPPSERVICE_TENANTID_A99D8AC51A3D4DA980A851C178D3F5FA }}
        subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_21EC107742C4419596E64BDF36906E3A }}

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: Invaise-BusinessDomain
        slot-name: Production
        package: ./api-publish
