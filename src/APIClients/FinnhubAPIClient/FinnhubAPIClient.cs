//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Invaise.BusinessDomain.API.FinnhubAPIClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFinnhubClient
    {
        /// <summary>
        /// Symbol Lookup
        /// </summary>
        /// <remarks>
        /// Search for best-matching symbols based on your query. You can input anything from symbol, security's name to ISIN and Cusip.
        /// </remarks>
        /// <param name="q">Query text can be symbol, name, isin, or cusip.</param>
        /// <param name="exchange">Exchange limit.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SymbolLookup> SymbolSearchAsync(string q, string exchange);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Symbol Lookup
        /// </summary>
        /// <remarks>
        /// Search for best-matching symbols based on your query. You can input anything from symbol, security's name to ISIN and Cusip.
        /// </remarks>
        /// <param name="q">Query text can be symbol, name, isin, or cusip.</param>
        /// <param name="exchange">Exchange limit.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SymbolLookup> SymbolSearchAsync(string q, string exchange, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Stock Symbol
        /// </summary>
        /// <remarks>
        /// List supported stocks. We use the following symbology to identify stocks on Finnhub &lt;code&gt;Exchange_Ticker.Exchange_Code&lt;/code&gt;. A list of supported exchange codes can be found &lt;a href="https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href="https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <param name="mic">Filter by MIC code.</param>
        /// <param name="securityType">Filter by security type used by OpenFigi standard.</param>
        /// <param name="currency">Filter by currency.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockSymbol>> StockSymbolsAsync(string exchange, string mic, string securityType, string currency);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stock Symbol
        /// </summary>
        /// <remarks>
        /// List supported stocks. We use the following symbology to identify stocks on Finnhub &lt;code&gt;Exchange_Ticker.Exchange_Code&lt;/code&gt;. A list of supported exchange codes can be found &lt;a href="https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href="https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <param name="mic">Filter by MIC code.</param>
        /// <param name="securityType">Filter by security type used by OpenFigi standard.</param>
        /// <param name="currency">Filter by currency.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockSymbol>> StockSymbolsAsync(string exchange, string mic, string securityType, string currency, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Market Status
        /// </summary>
        /// <remarks>
        /// Get current market status for global exchanges (whether exchanges are open or close).
        /// </remarks>
        /// <param name="exchange">Exchange code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketStatus> MarketStatusAsync(string exchange);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Market Status
        /// </summary>
        /// <remarks>
        /// Get current market status for global exchanges (whether exchanges are open or close).
        /// </remarks>
        /// <param name="exchange">Exchange code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketStatus> MarketStatusAsync(string exchange, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Market Holiday
        /// </summary>
        /// <remarks>
        /// Get a list of holidays for global exchanges.
        /// </remarks>
        /// <param name="exchange">Exchange code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketHoliday> MarketHolidayAsync(string exchange);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Market Holiday
        /// </summary>
        /// <remarks>
        /// Get a list of holidays for global exchanges.
        /// </remarks>
        /// <param name="exchange">Exchange code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarketHoliday> MarketHolidayAsync(string exchange, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Company Profile
        /// </summary>
        /// <remarks>
        /// Get general information of a company. You can query by symbol, ISIN or CUSIP
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL e.g.</param>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyProfile> CompanyProfileAsync(string symbol, string isin, string cusip);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Profile
        /// </summary>
        /// <remarks>
        /// Get general information of a company. You can query by symbol, ISIN or CUSIP
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL e.g.</param>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyProfile> CompanyProfileAsync(string symbol, string isin, string cusip, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Company Profile 2
        /// </summary>
        /// <remarks>
        /// Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of &lt;a href="#company-profile"&gt;Company Profile&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL e.g.</param>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyProfile2> CompanyProfile2Async(string symbol, string isin, string cusip);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Profile 2
        /// </summary>
        /// <remarks>
        /// Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of &lt;a href="#company-profile"&gt;Company Profile&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL e.g.</param>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyProfile2> CompanyProfile2Async(string symbol, string isin, string cusip, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Company Executive
        /// </summary>
        /// <remarks>
        /// Get a list of company's executives and members of the Board.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyExecutive> CompanyExecutiveAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Executive
        /// </summary>
        /// <remarks>
        /// Get a list of company's executives and members of the Board.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyExecutive> CompanyExecutiveAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Market News
        /// </summary>
        /// <remarks>
        /// Get latest market news.
        /// </remarks>
        /// <param name="category">This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.</param>
        /// <param name="minId">Use this field to get only news after this ID. Default to 0</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarketNews>> MarketNewsAsync(string category, long? minId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Market News
        /// </summary>
        /// <remarks>
        /// Get latest market news.
        /// </remarks>
        /// <param name="category">This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.</param>
        /// <param name="minId">Use this field to get only news after this ID. Default to 0</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarketNews>> MarketNewsAsync(string category, long? minId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Company News
        /// </summary>
        /// <remarks>
        /// List latest company news by symbol. This endpoint is only available for North American companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyNews>> CompanyNewsAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company News
        /// </summary>
        /// <remarks>
        /// List latest company news by symbol. This endpoint is only available for North American companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyNews>> CompanyNewsAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Major Press Releases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.&lt;/p&gt;&lt;p&gt;Full-text press releases data is available for Enterprise clients. &lt;a href="mailto:support@finnhub.io"&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From time: 2020-01-01.</param>
        /// <param name="to">To time: 2020-01-05.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PressRelease> PressReleasesAsync(string symbol, System.DateTime? from, System.DateTime? to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Major Press Releases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.&lt;/p&gt;&lt;p&gt;Full-text press releases data is available for Enterprise clients. &lt;a href="mailto:support@finnhub.io"&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From time: 2020-01-01.</param>
        /// <param name="to">To time: 2020-01-05.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PressRelease> PressReleasesAsync(string symbol, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// News Sentiment
        /// </summary>
        /// <remarks>
        /// Get company's news sentiment and statistics. This endpoint is only available for US companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewsSentiment> NewsSentimentAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// News Sentiment
        /// </summary>
        /// <remarks>
        /// Get company's news sentiment and statistics. This endpoint is only available for US companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewsSentiment> NewsSentimentAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Peers
        /// </summary>
        /// <remarks>
        /// Get company peers. Return a list of peers operating in the same country and sector/industry.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="grouping">Specify the grouping criteria for choosing peers.Supporter values: &lt;code&gt;sector&lt;/code&gt;, &lt;code&gt;industry&lt;/code&gt;, &lt;code&gt;subIndustry&lt;/code&gt;. Default to &lt;code&gt;subIndustry&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CompanyPeersAsync(string symbol, string grouping);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Peers
        /// </summary>
        /// <remarks>
        /// Get company peers. Return a list of peers operating in the same country and sector/industry.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="grouping">Specify the grouping criteria for choosing peers.Supporter values: &lt;code&gt;sector&lt;/code&gt;, &lt;code&gt;industry&lt;/code&gt;, &lt;code&gt;subIndustry&lt;/code&gt;. Default to &lt;code&gt;subIndustry&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CompanyPeersAsync(string symbol, string grouping, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Basic Financials
        /// </summary>
        /// <remarks>
        /// Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="metric">Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicFinancials> CompanyBasicFinancialsAsync(string symbol, string metric);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Basic Financials
        /// </summary>
        /// <remarks>
        /// Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="metric">Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicFinancials> CompanyBasicFinancialsAsync(string symbol, string metric, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Price Metrics
        /// </summary>
        /// <remarks>
        /// Get company price performance statistics such as 52-week high/low, YTD return and much more.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="date">Get data on a specific date in the past. The data is available weekly so your date will be automatically adjusted to the last day of that week.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PriceMetrics> PriceMetricsAsync(string symbol, string date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Price Metrics
        /// </summary>
        /// <remarks>
        /// Get company price performance statistics such as 52-week high/low, YTD return and much more.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="date">Get data on a specific date in the past. The data is available weekly so your date will be automatically adjusted to the last day of that week.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PriceMetrics> PriceMetricsAsync(string symbol, string date, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Symbol Change
        /// </summary>
        /// <remarks>
        /// Get a list of symbol changes for US-listed, EU-listed, NSE and ASX securities. Limit to 2000 events at a time.
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SymbolChange> SymbolChangeAsync(string from, string to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Symbol Change
        /// </summary>
        /// <remarks>
        /// Get a list of symbol changes for US-listed, EU-listed, NSE and ASX securities. Limit to 2000 events at a time.
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SymbolChange> SymbolChangeAsync(string from, string to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// ISIN Change
        /// </summary>
        /// <remarks>
        /// Get a list of ISIN changes for EU-listed securities. Limit to 2000 events at a time.
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsinChange> IsinChangeAsync(string from, string to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ISIN Change
        /// </summary>
        /// <remarks>
        /// Get a list of ISIN changes for EU-listed securities. Limit to 2000 events at a time.
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsinChange> IsinChangeAsync(string from, string to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Historical Market Cap
        /// </summary>
        /// <remarks>
        /// Get historical market cap data for global companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalMarketCapData> HistoricalMarketCapAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Historical Market Cap
        /// </summary>
        /// <remarks>
        /// Get historical market cap data for global companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalMarketCapData> HistoricalMarketCapAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Historical Employee Count
        /// </summary>
        /// <remarks>
        /// Get historical employee count for global companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalEmployeeCount> HistoricalEmployeeCountAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Historical Employee Count
        /// </summary>
        /// <remarks>
        /// Get historical employee count for global companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalEmployeeCount> HistoricalEmployeeCountAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Institutional Profile
        /// </summary>
        /// <remarks>
        /// Get a list of well-known institutional investors. Currently support 60+ profiles.
        /// </remarks>
        /// <param name="cik">Filter by CIK. Leave blank to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InstitutionalProfile> InstitutionalProfileAsync(string cik);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Institutional Profile
        /// </summary>
        /// <remarks>
        /// Get a list of well-known institutional investors. Currently support 60+ profiles.
        /// </remarks>
        /// <param name="cik">Filter by CIK. Leave blank to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InstitutionalProfile> InstitutionalProfileAsync(string cik, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Institutional Portfolio
        /// </summary>
        /// <remarks>
        /// Get the holdings/portfolio data of institutional investors from 13-F filings. Limit to 1 year of data at a time. You can get a list of supported CIK &lt;a href="/api/v1/institutional/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="cik">Fund's CIK.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InstitutionalPortfolio> InstitutionalPortfolioAsync(string cik, string from, string to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Institutional Portfolio
        /// </summary>
        /// <remarks>
        /// Get the holdings/portfolio data of institutional investors from 13-F filings. Limit to 1 year of data at a time. You can get a list of supported CIK &lt;a href="/api/v1/institutional/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="cik">Fund's CIK.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InstitutionalPortfolio> InstitutionalPortfolioAsync(string cik, string from, string to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Institutional Ownership
        /// </summary>
        /// <remarks>
        /// Get a list institutional investors' positions for a particular stock overtime. Data from 13-F filings. Limit to 1 year of data at a time.
        /// </remarks>
        /// <param name="symbol">Filter by symbol.</param>
        /// <param name="cusip">Filter by CUSIP.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InstitutionalOwnership> InstitutionalOwnershipAsync(string symbol, string cusip, string from, string to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Institutional Ownership
        /// </summary>
        /// <remarks>
        /// Get a list institutional investors' positions for a particular stock overtime. Data from 13-F filings. Limit to 1 year of data at a time.
        /// </remarks>
        /// <param name="symbol">Filter by symbol.</param>
        /// <param name="cusip">Filter by CUSIP.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InstitutionalOwnership> InstitutionalOwnershipAsync(string symbol, string cusip, string from, string to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ownership
        /// </summary>
        /// <remarks>
        /// Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of results. Leave empty to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Ownership> OwnershipAsync(string symbol, long? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ownership
        /// </summary>
        /// <remarks>
        /// Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of results. Leave empty to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Ownership> OwnershipAsync(string symbol, long? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fund Ownership
        /// </summary>
        /// <remarks>
        /// Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of results. Leave empty to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FundOwnership> FundOwnershipAsync(string symbol, long? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fund Ownership
        /// </summary>
        /// <remarks>
        /// Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of results. Leave empty to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FundOwnership> FundOwnershipAsync(string symbol, long? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Insider Transactions
        /// </summary>
        /// <remarks>
        /// Company insider transactions data sourced from &lt;code&gt;Form 3,4,5&lt;/code&gt;, SEDI and relevant companies' filings. This endpoint covers US, UK, Canada, Australia, India, and all major EU markets. Limit to 100 transactions per API call.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL. Leave this param blank to get the latest transactions.</param>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InsiderTransactions> InsiderTransactionsAsync(string symbol, System.DateTime? from, System.DateTime? to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Insider Transactions
        /// </summary>
        /// <remarks>
        /// Company insider transactions data sourced from &lt;code&gt;Form 3,4,5&lt;/code&gt;, SEDI and relevant companies' filings. This endpoint covers US, UK, Canada, Australia, India, and all major EU markets. Limit to 100 transactions per API call.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL. Leave this param blank to get the latest transactions.</param>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InsiderTransactions> InsiderTransactionsAsync(string symbol, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Insider Sentiment
        /// </summary>
        /// <remarks>
        /// Get insider sentiment data for US companies calculated using method discussed &lt;a href="https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a" target="_blank"&gt;here&lt;/a&gt;. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InsiderSentiments> InsiderSentimentAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Insider Sentiment
        /// </summary>
        /// <remarks>
        /// Get insider sentiment data for US companies calculated using method discussed &lt;a href="https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a" target="_blank"&gt;here&lt;/a&gt;. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InsiderSentiments> InsiderSentimentAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Financial Statements
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through &lt;a href="#filings"&gt;SEC Filings&lt;/a&gt; and &lt;a href="#international-filings"&gt;International Filings&lt;/a&gt; endpoints.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&amp;P or Yahoo Finance ? Check out our &lt;a href="/faq"&gt;FAQ page&lt;/a&gt; to learn more&lt;/i&gt;&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="statement">Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.</param>
        /// <param name="freq">Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FinancialStatements> FinancialsAsync(string symbol, string statement, string freq);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Financial Statements
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through &lt;a href="#filings"&gt;SEC Filings&lt;/a&gt; and &lt;a href="#international-filings"&gt;International Filings&lt;/a&gt; endpoints.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&amp;P or Yahoo Finance ? Check out our &lt;a href="/faq"&gt;FAQ page&lt;/a&gt; to learn more&lt;/i&gt;&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="statement">Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.</param>
        /// <param name="freq">Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FinancialStatements> FinancialsAsync(string symbol, string statement, string freq, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Financials As Reported
        /// </summary>
        /// <remarks>
        /// Get financials as reported. This data is available for bulk download on &lt;a href="https://www.kaggle.com/finnhub/reported-financials" target="_blank"&gt;Kaggle SEC Financials database&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="cik">CIK.</param>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve financials from.</param>
        /// <param name="freq">Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for endDate.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for endDate.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FinancialsAsReported> FinancialsReportedAsync(string symbol, string cik, string accessNumber, string freq, System.DateTime? from, System.DateTime? to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Financials As Reported
        /// </summary>
        /// <remarks>
        /// Get financials as reported. This data is available for bulk download on &lt;a href="https://www.kaggle.com/finnhub/reported-financials" target="_blank"&gt;Kaggle SEC Financials database&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="cik">CIK.</param>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve financials from.</param>
        /// <param name="freq">Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for endDate.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for endDate.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FinancialsAsReported> FinancialsReportedAsync(string symbol, string cik, string accessNumber, string freq, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Revenue Breakdown
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get revenue breakdown as-reporetd by product and geography. Users on personal plans can access data for US companies which disclose their revenue breakdown in the annual or quarterly reports.&lt;/p&gt;&lt;p&gt;Global standardized revenue breakdown/segments data is available for Enterprise users. &lt;a href="mailto:support@finnhub.io"&gt;Contact us&lt;/a&gt; to inquire about the access for Global standardized data.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="cik">CIK.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevenueBreakdown> RevenueBreakdownAsync(string symbol, string cik);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revenue Breakdown
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get revenue breakdown as-reporetd by product and geography. Users on personal plans can access data for US companies which disclose their revenue breakdown in the annual or quarterly reports.&lt;/p&gt;&lt;p&gt;Global standardized revenue breakdown/segments data is available for Enterprise users. &lt;a href="mailto:support@finnhub.io"&gt;Contact us&lt;/a&gt; to inquire about the access for Global standardized data.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="cik">CIK.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevenueBreakdown> RevenueBreakdownAsync(string symbol, string cik, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// SEC Filings
        /// </summary>
        /// <remarks>
        /// List company's filing. Limit to 250 documents at a time. This data is available for bulk download on &lt;a href="https://www.kaggle.com/finnhub/sec-filings" target="_blank"&gt;Kaggle SEC Filings database&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.</param>
        /// <param name="cik">CIK.</param>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve data from.</param>
        /// <param name="form">Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.</param>
        /// <param name="from">From date: 2023-03-15.</param>
        /// <param name="to">To date: 2023-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Filing>> FilingsAsync(string symbol, string cik, string accessNumber, string form, System.DateTime? from, System.DateTime? to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// SEC Filings
        /// </summary>
        /// <remarks>
        /// List company's filing. Limit to 250 documents at a time. This data is available for bulk download on &lt;a href="https://www.kaggle.com/finnhub/sec-filings" target="_blank"&gt;Kaggle SEC Filings database&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.</param>
        /// <param name="cik">CIK.</param>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve data from.</param>
        /// <param name="form">Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.</param>
        /// <param name="from">From date: 2023-03-15.</param>
        /// <param name="to">To date: 2023-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Filing>> FilingsAsync(string symbol, string cik, string accessNumber, string form, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// SEC Sentiment Analysis
        /// </summary>
        /// <remarks>
        /// Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company's stock price in the upcoming 4 quarters. We make use of &lt;a href= "https://sraf.nd.edu/textual-analysis/resources/" target="_blank"&gt;Loughran and McDonald Sentiment Word Lists&lt;/a&gt; to calculate the sentiment for each filing.
        /// </remarks>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve data from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SECSentimentAnalysis> FilingsSentimentAsync(string accessNumber);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// SEC Sentiment Analysis
        /// </summary>
        /// <remarks>
        /// Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company's stock price in the upcoming 4 quarters. We make use of &lt;a href= "https://sraf.nd.edu/textual-analysis/resources/" target="_blank"&gt;Loughran and McDonald Sentiment Word Lists&lt;/a&gt; to calculate the sentiment for each filing.
        /// </remarks>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve data from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SECSentimentAnalysis> FilingsSentimentAsync(string accessNumber, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Similarity Index
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Calculate the textual difference between a company's 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019's 10-K with 2018's 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company's stock price in the upcoming 4 quarters.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol. Required if cik is empty</param>
        /// <param name="cik">CIK. Required if symbol is empty</param>
        /// <param name="freq">&lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimilarityIndex> SimilarityIndexAsync(string symbol, string cik, string freq);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Similarity Index
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Calculate the textual difference between a company's 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019's 10-K with 2018's 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company's stock price in the upcoming 4 quarters.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol. Required if cik is empty</param>
        /// <param name="cik">CIK. Required if symbol is empty</param>
        /// <param name="freq">&lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimilarityIndex> SimilarityIndexAsync(string symbol, string cik, string freq, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// IPO Calendar
        /// </summary>
        /// <remarks>
        /// Get recent and upcoming IPO.
        /// </remarks>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IPOCalendar> IpoCalendarAsync(System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// IPO Calendar
        /// </summary>
        /// <remarks>
        /// Get recent and upcoming IPO.
        /// </remarks>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IPOCalendar> IpoCalendarAsync(System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sector Metrics
        /// </summary>
        /// <remarks>
        /// Get ratios for different sectors and regions/indices.
        /// </remarks>
        /// <param name="region">Region. A list of supported values for this field can be found &lt;a href="https://docs.google.com/spreadsheets/d/1afedyv7yWJ-z7pMjaAZK-f6ENY3mI3EBCk95QffpoHw/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SectorMetric> SectorMetricAsync(string region);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sector Metrics
        /// </summary>
        /// <remarks>
        /// Get ratios for different sectors and regions/indices.
        /// </remarks>
        /// <param name="region">Region. A list of supported values for this field can be found &lt;a href="https://docs.google.com/spreadsheets/d/1afedyv7yWJ-z7pMjaAZK-f6ENY3mI3EBCk95QffpoHw/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SectorMetric> SectorMetricAsync(string region, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Dividends
        /// </summary>
        /// <remarks>
        /// Get dividends data for common stocks going back 30 years.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">YYYY-MM-DD.</param>
        /// <param name="to">YYYY-MM-DD.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Dividends>> StockDividendsAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dividends
        /// </summary>
        /// <remarks>
        /// Get dividends data for common stocks going back 30 years.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">YYYY-MM-DD.</param>
        /// <param name="to">YYYY-MM-DD.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Dividends>> StockDividendsAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Recommendation Trends
        /// </summary>
        /// <remarks>
        /// Get latest analyst recommendation trends for a company.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RecommendationTrend>> RecommendationTrendsAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recommendation Trends
        /// </summary>
        /// <remarks>
        /// Get latest analyst recommendation trends for a company.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RecommendationTrend>> RecommendationTrendsAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Price Target
        /// </summary>
        /// <remarks>
        /// Get latest price target consensus.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PriceTarget> PriceTargetAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Price Target
        /// </summary>
        /// <remarks>
        /// Get latest price target consensus.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PriceTarget> PriceTargetAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Stock Upgrade/Downgrade
        /// </summary>
        /// <remarks>
        /// Get latest stock upgrade and downgrade.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.</param>
        /// <param name="from">From date: 2000-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpgradeDowngrade>> UpgradeDowngradeAsync(string symbol, System.DateTime? from, System.DateTime? to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stock Upgrade/Downgrade
        /// </summary>
        /// <remarks>
        /// Get latest stock upgrade and downgrade.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.</param>
        /// <param name="from">From date: 2000-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpgradeDowngrade>> UpgradeDowngradeAsync(string symbol, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Revenue Estimates
        /// </summary>
        /// <remarks>
        /// Get company's revenue estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevenueEstimates> CompanyRevenueEstimatesAsync(string symbol, string freq);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revenue Estimates
        /// </summary>
        /// <remarks>
        /// Get company's revenue estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevenueEstimates> CompanyRevenueEstimatesAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// EBITDA Estimates
        /// </summary>
        /// <remarks>
        /// Get company's ebitda estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EbitdaEstimates> CompanyEbitdaEstimatesAsync(string symbol, string freq);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// EBITDA Estimates
        /// </summary>
        /// <remarks>
        /// Get company's ebitda estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EbitdaEstimates> CompanyEbitdaEstimatesAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// EBIT Estimates
        /// </summary>
        /// <remarks>
        /// Get company's ebit estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EbitEstimates> CompanyEbitEstimatesAsync(string symbol, string freq);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// EBIT Estimates
        /// </summary>
        /// <remarks>
        /// Get company's ebit estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EbitEstimates> CompanyEbitEstimatesAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Earnings Estimates
        /// </summary>
        /// <remarks>
        /// Get company's EPS estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsEstimates> CompanyEpsEstimatesAsync(string symbol, string freq);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Estimates
        /// </summary>
        /// <remarks>
        /// Get company's EPS estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsEstimates> CompanyEpsEstimatesAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Earnings Surprises
        /// </summary>
        /// <remarks>
        /// Get company historical quarterly earnings surprise going back to 2000.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of period returned. Leave blank to get the full history.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EarningResult>> CompanyEarningsAsync(string symbol, long? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Surprises
        /// </summary>
        /// <remarks>
        /// Get company historical quarterly earnings surprise going back to 2000.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of period returned. Leave blank to get the full history.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EarningResult>> CompanyEarningsAsync(string symbol, long? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Earnings Calendar
        /// </summary>
        /// <remarks>
        /// Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
        /// </remarks>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <param name="symbol">Filter by symbol: AAPL.</param>
        /// <param name="international">Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsCalendar> EarningsCalendarAsync(System.DateTime? from, System.DateTime? to, string symbol, bool? international);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Calendar
        /// </summary>
        /// <remarks>
        /// Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
        /// </remarks>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <param name="symbol">Filter by symbol: AAPL.</param>
        /// <param name="international">Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsCalendar> EarningsCalendarAsync(System.DateTime? from, System.DateTime? to, string symbol, bool? international, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Quote
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.&lt;/p&gt;&lt;p&gt;Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. &lt;a href="mailto:support@finnhub.io"&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Quote> QuoteAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Quote
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.&lt;/p&gt;&lt;p&gt;Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. &lt;a href="mailto:support@finnhub.io"&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Quote> QuoteAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Stock Candles
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get candlestick data (OHLCV) for stocks.&lt;/p&gt;&lt;p&gt;Daily data will be adjusted for Splits. Intraday data will remain unadjusted. Only 1 month of intraday will be returned at a time. If you need more historical intraday data, please use the from and to params iteratively to request more data.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockCandles> StockCandlesAsync(string symbol, string resolution, long from, long to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stock Candles
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get candlestick data (OHLCV) for stocks.&lt;/p&gt;&lt;p&gt;Daily data will be adjusted for Splits. Intraday data will remain unadjusted. Only 1 month of intraday will be returned at a time. If you need more historical intraday data, please use the from and to params iteratively to request more data.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockCandles> StockCandlesAsync(string symbol, string resolution, long from, long to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Tick Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get historical tick data for global exchanges.&lt;/p&gt;&lt;p&gt;For more historical tick data, you can visit our bulk download page in the Dashboard &lt;a target="_blank" href="/dashboard/download",&gt;here&lt;/a&gt; to speed up the download process.&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;US CTA/UTP&lt;/th&gt;
        /// <br/>      &lt;td&gt;Full SIP&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;TSX&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt;&lt;li&gt;TSX&lt;/li&gt;&lt;li&gt;TSX Venture&lt;/li&gt;&lt;li&gt;Index&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;LSE&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt;&lt;li&gt;London Stock Exchange (L)&lt;/li&gt;&lt;li&gt;LSE International (L)&lt;/li&gt;&lt;li&gt;LSE European (L)&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;15 minute&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;Euronext&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt; &lt;li&gt;Euronext Paris (PA)&lt;/li&gt; &lt;li&gt;Euronext Amsterdam (AS)&lt;/li&gt; &lt;li&gt;Euronext Lisbon (LS)&lt;/li&gt; &lt;li&gt;Euronext Brussels (BR)&lt;/li&gt; &lt;li&gt;Euronext Oslo (OL)&lt;/li&gt; &lt;li&gt;Euronext London (LN)&lt;/li&gt; &lt;li&gt;Euronext Dublin (IR)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;Deutsche Börse&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt; &lt;li&gt;Frankfurt (F)&lt;/li&gt; &lt;li&gt;Xetra (DE)&lt;/li&gt; &lt;li&gt;Duesseldorf (DU)&lt;/li&gt; &lt;li&gt;Hamburg (HM)&lt;/li&gt; &lt;li&gt;Berlin (BE)&lt;/li&gt; &lt;li&gt;Hanover (HA)&lt;/li&gt; &lt;li&gt;Stoxx (SX)&lt;/li&gt; &lt;li&gt;TradeGate (TG)&lt;/li&gt; &lt;li&gt;Zertifikate (SC)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TickData> StockTickAsync(string symbol, System.DateTime date, long limit, long skip);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Tick Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get historical tick data for global exchanges.&lt;/p&gt;&lt;p&gt;For more historical tick data, you can visit our bulk download page in the Dashboard &lt;a target="_blank" href="/dashboard/download",&gt;here&lt;/a&gt; to speed up the download process.&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;US CTA/UTP&lt;/th&gt;
        /// <br/>      &lt;td&gt;Full SIP&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;TSX&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt;&lt;li&gt;TSX&lt;/li&gt;&lt;li&gt;TSX Venture&lt;/li&gt;&lt;li&gt;Index&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;LSE&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt;&lt;li&gt;London Stock Exchange (L)&lt;/li&gt;&lt;li&gt;LSE International (L)&lt;/li&gt;&lt;li&gt;LSE European (L)&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;15 minute&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;Euronext&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt; &lt;li&gt;Euronext Paris (PA)&lt;/li&gt; &lt;li&gt;Euronext Amsterdam (AS)&lt;/li&gt; &lt;li&gt;Euronext Lisbon (LS)&lt;/li&gt; &lt;li&gt;Euronext Brussels (BR)&lt;/li&gt; &lt;li&gt;Euronext Oslo (OL)&lt;/li&gt; &lt;li&gt;Euronext London (LN)&lt;/li&gt; &lt;li&gt;Euronext Dublin (IR)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;Deutsche Börse&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt; &lt;li&gt;Frankfurt (F)&lt;/li&gt; &lt;li&gt;Xetra (DE)&lt;/li&gt; &lt;li&gt;Duesseldorf (DU)&lt;/li&gt; &lt;li&gt;Hamburg (HM)&lt;/li&gt; &lt;li&gt;Berlin (BE)&lt;/li&gt; &lt;li&gt;Hanover (HA)&lt;/li&gt; &lt;li&gt;Stoxx (SX)&lt;/li&gt; &lt;li&gt;TradeGate (TG)&lt;/li&gt; &lt;li&gt;Zertifikate (SC)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TickData> StockTickAsync(string symbol, System.DateTime date, long limit, long skip, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Historical NBBO
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.&lt;/p&gt;&lt;p&gt;For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard &lt;a target="_blank" href="/dashboard/download",&gt;here&lt;/a&gt;.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalNBBO> StockNbboAsync(string symbol, System.DateTime date, long limit, long skip);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Historical NBBO
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.&lt;/p&gt;&lt;p&gt;For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard &lt;a target="_blank" href="/dashboard/download",&gt;here&lt;/a&gt;.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalNBBO> StockNbboAsync(string symbol, System.DateTime date, long limit, long skip, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Last Bid-Ask
        /// </summary>
        /// <remarks>
        /// Get last bid/ask data for US stocks.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LastBidAsk> StockBidaskAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Last Bid-Ask
        /// </summary>
        /// <remarks>
        /// Get last bid/ask data for US stocks.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LastBidAsk> StockBidaskAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Splits
        /// </summary>
        /// <remarks>
        /// Get splits data for stocks.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">YYYY-MM-DD.</param>
        /// <param name="to">YYYY-MM-DD.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Split>> StockSplitsAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Splits
        /// </summary>
        /// <remarks>
        /// Get splits data for stocks.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">YYYY-MM-DD.</param>
        /// <param name="to">YYYY-MM-DD.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Split>> StockSplitsAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Dividends 2 (Basic)
        /// </summary>
        /// <remarks>
        /// Get global dividends data.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Dividends2> StockBasicDividendsAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dividends 2 (Basic)
        /// </summary>
        /// <remarks>
        /// Get global dividends data.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Dividends2> StockBasicDividendsAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Indices Constituents
        /// </summary>
        /// <remarks>
        /// Get a list of index's constituents. A list of supported indices for this endpoint can be found &lt;a href="/api/v1/index/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndicesConstituents> IndicesConstituentsAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Indices Constituents
        /// </summary>
        /// <remarks>
        /// Get a list of index's constituents. A list of supported indices for this endpoint can be found &lt;a href="/api/v1/index/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndicesConstituents> IndicesConstituentsAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Indices Historical Constituents
        /// </summary>
        /// <remarks>
        /// Get full history of index's constituents including symbols and dates of joining and leaving the Index. Currently support &lt;code&gt;^GSPC&lt;/code&gt;, &lt;code&gt;^NDX&lt;/code&gt;, &lt;code&gt;^DJI&lt;/code&gt;
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndicesHistoricalConstituents> IndicesHistoricalConstituentsAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Indices Historical Constituents
        /// </summary>
        /// <remarks>
        /// Get full history of index's constituents including symbols and dates of joining and leaving the Index. Currently support &lt;code&gt;^GSPC&lt;/code&gt;, &lt;code&gt;^NDX&lt;/code&gt;, &lt;code&gt;^DJI&lt;/code&gt;
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndicesHistoricalConstituents> IndicesHistoricalConstituentsAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// ETFs Profile
        /// </summary>
        /// <remarks>
        /// Get ETF profile information. This endpoint has global coverage. A list of supported ETFs can be found &lt;a href="/api/v1/etf/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ETFsProfile> EtfsProfileAsync(string symbol, string isin);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ETFs Profile
        /// </summary>
        /// <remarks>
        /// Get ETF profile information. This endpoint has global coverage. A list of supported ETFs can be found &lt;a href="/api/v1/etf/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ETFsProfile> EtfsProfileAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// ETFs Holdings
        /// </summary>
        /// <remarks>
        /// Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings. A list of supported ETFs can be found &lt;a href="/api/v1/etf/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <param name="skip">Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.</param>
        /// <param name="date">Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ETFsHoldings> EtfsHoldingsAsync(string symbol, string isin, long? skip, string date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ETFs Holdings
        /// </summary>
        /// <remarks>
        /// Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings. A list of supported ETFs can be found &lt;a href="/api/v1/etf/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <param name="skip">Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.</param>
        /// <param name="date">Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ETFsHoldings> EtfsHoldingsAsync(string symbol, string isin, long? skip, string date, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// ETFs Sector Exposure
        /// </summary>
        /// <remarks>
        /// Get ETF sector exposure data.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ETFsSectorExposure> EtfsSectorExposureAsync(string symbol, string isin);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ETFs Sector Exposure
        /// </summary>
        /// <remarks>
        /// Get ETF sector exposure data.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ETFsSectorExposure> EtfsSectorExposureAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// ETFs Country Exposure
        /// </summary>
        /// <remarks>
        /// Get ETF country exposure data.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ETFsCountryExposure> EtfsCountryExposureAsync(string symbol, string isin);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ETFs Country Exposure
        /// </summary>
        /// <remarks>
        /// Get ETF country exposure data.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ETFsCountryExposure> EtfsCountryExposureAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mutual Funds Profile
        /// </summary>
        /// <remarks>
        /// Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href="/api/v1/mutual-fund/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Fund's symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundProfile> MutualFundProfileAsync(string symbol, string isin);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds Profile
        /// </summary>
        /// <remarks>
        /// Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href="/api/v1/mutual-fund/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Fund's symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundProfile> MutualFundProfileAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mutual Funds Holdings
        /// </summary>
        /// <remarks>
        /// Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href="/api/v1/mutual-fund/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Fund's symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <param name="skip">Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundHoldings> MutualFundHoldingsAsync(string symbol, string isin, long? skip);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds Holdings
        /// </summary>
        /// <remarks>
        /// Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href="/api/v1/mutual-fund/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Fund's symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <param name="skip">Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundHoldings> MutualFundHoldingsAsync(string symbol, string isin, long? skip, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mutual Funds Sector Exposure
        /// </summary>
        /// <remarks>
        /// Get Mutual Funds sector exposure data.
        /// </remarks>
        /// <param name="symbol">Mutual Fund symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundSectorExposure> MutualFundSectorExposureAsync(string symbol, string isin);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds Sector Exposure
        /// </summary>
        /// <remarks>
        /// Get Mutual Funds sector exposure data.
        /// </remarks>
        /// <param name="symbol">Mutual Fund symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundSectorExposure> MutualFundSectorExposureAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mutual Funds Country Exposure
        /// </summary>
        /// <remarks>
        /// Get Mutual Funds country exposure data.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundCountryExposure> MutualFundCountryExposureAsync(string symbol, string isin);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds Country Exposure
        /// </summary>
        /// <remarks>
        /// Get Mutual Funds country exposure data.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundCountryExposure> MutualFundCountryExposureAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mutual Funds EET
        /// </summary>
        /// <remarks>
        /// Get EET data for EU funds. For PAIs data, please see the EET PAI endpoint.
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundEet> MutualFundEetAsync(string isin);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds EET
        /// </summary>
        /// <remarks>
        /// Get EET data for EU funds. For PAIs data, please see the EET PAI endpoint.
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundEet> MutualFundEetAsync(string isin, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mutual Funds EET PAI
        /// </summary>
        /// <remarks>
        /// Get EET PAI data for EU funds.
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundEetPai> MutualFundEetPaiAsync(string isin);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds EET PAI
        /// </summary>
        /// <remarks>
        /// Get EET PAI data for EU funds.
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MutualFundEetPai> MutualFundEetPaiAsync(string isin, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Forex Exchanges
        /// </summary>
        /// <remarks>
        /// List supported forex exchanges
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ForexExchangesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forex Exchanges
        /// </summary>
        /// <remarks>
        /// List supported forex exchanges
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ForexExchangesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Forex Symbol
        /// </summary>
        /// <remarks>
        /// List supported forex symbols.
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ForexSymbol>> ForexSymbolsAsync(string exchange);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forex Symbol
        /// </summary>
        /// <remarks>
        /// List supported forex symbols.
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ForexSymbol>> ForexSymbolsAsync(string exchange, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Forex Candles
        /// </summary>
        /// <remarks>
        /// Get candlestick data for forex symbols.
        /// </remarks>
        /// <param name="symbol">Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ForexCandles> ForexCandlesAsync(string symbol, string resolution, long from, long to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forex Candles
        /// </summary>
        /// <remarks>
        /// Get candlestick data for forex symbols.
        /// </remarks>
        /// <param name="symbol">Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ForexCandles> ForexCandlesAsync(string symbol, string resolution, long from, long to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Forex rates
        /// </summary>
        /// <remarks>
        /// Get rates for all forex pairs. Ideal for currency conversion
        /// </remarks>
        /// <param name="base">Base currency. Default to EUR.</param>
        /// <param name="date">Date. Leave blank to get the latest data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Forexrates> ForexRatesAsync(string @base, string date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forex rates
        /// </summary>
        /// <remarks>
        /// Get rates for all forex pairs. Ideal for currency conversion
        /// </remarks>
        /// <param name="base">Base currency. Default to EUR.</param>
        /// <param name="date">Date. Leave blank to get the latest data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Forexrates> ForexRatesAsync(string @base, string date, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Crypto Exchanges
        /// </summary>
        /// <remarks>
        /// List supported crypto exchanges
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CryptoExchangesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Exchanges
        /// </summary>
        /// <remarks>
        /// List supported crypto exchanges
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CryptoExchangesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Crypto Symbol
        /// </summary>
        /// <remarks>
        /// List supported crypto symbols by exchange
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CryptoSymbol>> CryptoSymbolsAsync(string exchange);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Symbol
        /// </summary>
        /// <remarks>
        /// List supported crypto symbols by exchange
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CryptoSymbol>> CryptoSymbolsAsync(string exchange, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Crypto Profile
        /// </summary>
        /// <remarks>
        /// Get crypto's profile.
        /// </remarks>
        /// <param name="symbol">Crypto symbol such as BTC or ETH.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CryptoProfile> CryptoProfileAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Profile
        /// </summary>
        /// <remarks>
        /// Get crypto's profile.
        /// </remarks>
        /// <param name="symbol">Crypto symbol such as BTC or ETH.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CryptoProfile> CryptoProfileAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Crypto Candles
        /// </summary>
        /// <remarks>
        /// Get candlestick data for crypto symbols.
        /// </remarks>
        /// <param name="symbol">Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CryptoCandles> CryptoCandlesAsync(string symbol, string resolution, long from, long to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Candles
        /// </summary>
        /// <remarks>
        /// Get candlestick data for crypto symbols.
        /// </remarks>
        /// <param name="symbol">Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CryptoCandles> CryptoCandlesAsync(string symbol, string resolution, long from, long to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Pattern Recognition
        /// </summary>
        /// <remarks>
        /// Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PatternRecognition> PatternRecognitionAsync(string symbol, string resolution);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Pattern Recognition
        /// </summary>
        /// <remarks>
        /// Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PatternRecognition> PatternRecognitionAsync(string symbol, string resolution, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Support/Resistance
        /// </summary>
        /// <remarks>
        /// Get support and resistance levels for a symbol.
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupportResistance> SupportResistanceAsync(string symbol, string resolution);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Support/Resistance
        /// </summary>
        /// <remarks>
        /// Get support and resistance levels for a symbol.
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupportResistance> SupportResistanceAsync(string symbol, string resolution, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Aggregate Indicators
        /// </summary>
        /// <remarks>
        /// Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v. A full list of indicators can be found &lt;a href="https://docs.google.com/spreadsheets/d/1MWuy0WuT2yVlxr1KbPdggVygMZtJfunDnhe-C0GEXYM/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AggregateIndicators> AggregateIndicatorAsync(string symbol, string resolution);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Aggregate Indicators
        /// </summary>
        /// <remarks>
        /// Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v. A full list of indicators can be found &lt;a href="https://docs.google.com/spreadsheets/d/1MWuy0WuT2yVlxr1KbPdggVygMZtJfunDnhe-C0GEXYM/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AggregateIndicators> AggregateIndicatorAsync(string symbol, string resolution, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Technical Indicators
        /// </summary>
        /// <remarks>
        /// Return technical indicator with price data. List of supported indicators can be found &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <param name="indicator">Indicator name. Full list can be found &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <param name="indicator_fields">Check out &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;this page&lt;/a&gt; to see which indicators and params are supported.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TechnicalIndicator> TechnicalIndicatorAsync(string symbol, string resolution, long from, long to, string indicator, IndicatorFields indicator_fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Technical Indicators
        /// </summary>
        /// <remarks>
        /// Return technical indicator with price data. List of supported indicators can be found &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <param name="indicator">Indicator name. Full list can be found &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <param name="indicator_fields">Check out &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;this page&lt;/a&gt; to see which indicators and params are supported.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TechnicalIndicator> TechnicalIndicatorAsync(string symbol, string resolution, long from, long to, string indicator, IndicatorFields indicator_fields, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Earnings Call Transcripts List
        /// </summary>
        /// <remarks>
        /// List earnings call transcripts' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
        /// </remarks>
        /// <param name="symbol">Company symbol: AAPL. Leave empty to list the latest transcripts</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsCallTranscriptsList> TranscriptsListAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Call Transcripts List
        /// </summary>
        /// <remarks>
        /// List earnings call transcripts' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
        /// </remarks>
        /// <param name="symbol">Company symbol: AAPL. Leave empty to list the latest transcripts</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsCallTranscriptsList> TranscriptsListAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Earnings Call Transcripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get earnings call transcripts, audio and participants' list. Data is available for US, UK, European, Australian and Canadian companies.&lt;p&gt;15+ years of data is available with 220,000+ audio which add up to 7TB in size.&lt;/p&gt;
        /// </remarks>
        /// <param name="id">Transcript's id obtained with &lt;a href="#transcripts-list"&gt;Transcripts List endpoint&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsCallTranscripts> TranscriptsAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Call Transcripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get earnings call transcripts, audio and participants' list. Data is available for US, UK, European, Australian and Canadian companies.&lt;p&gt;15+ years of data is available with 220,000+ audio which add up to 7TB in size.&lt;/p&gt;
        /// </remarks>
        /// <param name="id">Transcript's id obtained with &lt;a href="#transcripts-list"&gt;Transcripts List endpoint&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsCallTranscripts> TranscriptsAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Earnings Call Audio Live
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Stream live earnings calls with data provided in the calendar. The data will be available in m3u8 format. mp3 files will be available once the calls finish in the &lt;code&gt;recording&lt;/code&gt; field.&lt;/p&gt;
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="symbol">Filter by symbol: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsCallLive> EarningsCallLiveAsync(System.DateTime? from, System.DateTime? to, string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Call Audio Live
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Stream live earnings calls with data provided in the calendar. The data will be available in m3u8 format. mp3 files will be available once the calls finish in the &lt;code&gt;recording&lt;/code&gt; field.&lt;/p&gt;
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="symbol">Filter by symbol: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EarningsCallLive> EarningsCallLiveAsync(System.DateTime? from, System.DateTime? to, string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Company Presentation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get presentations/slides data in PDF format that are usually used during earnings calls.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockPresentation> StockPresentationAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Presentation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get presentations/slides data in PDF format that are usually used during earnings calls.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockPresentation> StockPresentationAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Social Sentiment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get social sentiment for stocks on Reddit and Twitter.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SocialSentiment> SocialSentimentAsync(string symbol, System.DateTime? from, System.DateTime? to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Social Sentiment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get social sentiment for stocks on Reddit and Twitter.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SocialSentiment> SocialSentimentAsync(string symbol, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Investment Themes (Thematic Investing)
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.&lt;/p&gt;&lt;p&gt;This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.&lt;/p&gt;&lt;p&gt;A full list of themes supported can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing"&gt;here&lt;/a&gt;. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.&lt;/p&gt;
        /// </remarks>
        /// <param name="theme">Investment theme. A full list of themes supported can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InvestmentThemes> InvestmentThemesAsync(string theme);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Investment Themes (Thematic Investing)
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.&lt;/p&gt;&lt;p&gt;This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.&lt;/p&gt;&lt;p&gt;A full list of themes supported can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing"&gt;here&lt;/a&gt;. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.&lt;/p&gt;
        /// </remarks>
        /// <param name="theme">Investment theme. A full list of themes supported can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InvestmentThemes> InvestmentThemesAsync(string theme, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supply Chain Relationships
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides an overall map of public companies' key customers and suppliers. The data offers a deeper look into a company's supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupplyChainRelationships> SupplyChainRelationshipsAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supply Chain Relationships
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides an overall map of public companies' key customers and suppliers. The data offers a deeper look into a company's supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupplyChainRelationships> SupplyChainRelationshipsAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Company ESG Scores
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides the latest ESG scores and important indicators for 7000+ global companies. The data is collected through company's public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyESG> CompanyEsgScoreAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company ESG Scores
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides the latest ESG scores and important indicators for 7000+ global companies. The data is collected through company's public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyESG> CompanyEsgScoreAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Historical ESG Scores
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides historical ESG scores and important indicators for 7000+ global companies. The data is collected through company's public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalCompanyESG> CompanyHistoricalEsgScoreAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Historical ESG Scores
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides historical ESG scores and important indicators for 7000+ global companies. The data is collected through company's public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalCompanyESG> CompanyHistoricalEsgScoreAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Company Earnings Quality Score
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides Earnings Quality Score for global companies.&lt;/p&gt;&lt;p&gt; Earnings quality refers to the extent to which current earnings predict future earnings. "High-quality" earnings are expected to persist, while "low-quality" earnings do not. A higher score means a higher earnings quality&lt;/p&gt;&lt;p&gt;Finnhub uses a proprietary model which takes into consideration 4 criteria:&lt;/p&gt; &lt;ul style="list-style-type: unset; margin-left: 30px;"&gt;&lt;li&gt;Profitability&lt;/li&gt;&lt;li&gt;Growth&lt;/li&gt;&lt;li&gt;Cash Generation &amp; Capital Allocation&lt;/li&gt;&lt;li&gt;Leverage&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="freq">Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyEarningsQualityScore> CompanyEarningsQualityScoreAsync(string symbol, string freq);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Earnings Quality Score
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides Earnings Quality Score for global companies.&lt;/p&gt;&lt;p&gt; Earnings quality refers to the extent to which current earnings predict future earnings. "High-quality" earnings are expected to persist, while "low-quality" earnings do not. A higher score means a higher earnings quality&lt;/p&gt;&lt;p&gt;Finnhub uses a proprietary model which takes into consideration 4 criteria:&lt;/p&gt; &lt;ul style="list-style-type: unset; margin-left: 30px;"&gt;&lt;li&gt;Profitability&lt;/li&gt;&lt;li&gt;Growth&lt;/li&gt;&lt;li&gt;Cash Generation &amp; Capital Allocation&lt;/li&gt;&lt;li&gt;Leverage&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="freq">Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompanyEarningsQualityScore> CompanyEarningsQualityScoreAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// COVID-19
        /// </summary>
        /// <remarks>
        /// Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API &lt;a href="https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19" target="_blank" rel="nofollow"&gt;here&lt;/a&gt;
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CovidInfo>> Covid19Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// COVID-19
        /// </summary>
        /// <remarks>
        /// Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API &lt;a href="https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19" target="_blank" rel="nofollow"&gt;here&lt;/a&gt;
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CovidInfo>> Covid19Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// FDA Committee Meeting Calendar
        /// </summary>
        /// <remarks>
        /// FDA's advisory committees are established to provide functions which support the agency's mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FDAComitteeMeeting>> FdaCommitteeMeetingCalendarAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// FDA Committee Meeting Calendar
        /// </summary>
        /// <remarks>
        /// FDA's advisory committees are established to provide functions which support the agency's mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FDAComitteeMeeting>> FdaCommitteeMeetingCalendarAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// USPTO Patents
        /// </summary>
        /// <remarks>
        /// List USPTO patents for companies. Limit to 250 records per API call.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsptoPatentResult> StockUsptoPatentAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// USPTO Patents
        /// </summary>
        /// <remarks>
        /// List USPTO patents for companies. Limit to 250 records per API call.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsptoPatentResult> StockUsptoPatentAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// H1-B Visa Application
        /// </summary>
        /// <remarks>
        /// Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VisaApplicationResult> StockVisaApplicationAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// H1-B Visa Application
        /// </summary>
        /// <remarks>
        /// Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VisaApplicationResult> StockVisaApplicationAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Senate Lobbying
        /// </summary>
        /// <remarks>
        /// Get a list of reported lobbying activities in the Senate and the House.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LobbyingResult> StockLobbyingAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Senate Lobbying
        /// </summary>
        /// <remarks>
        /// Get a list of reported lobbying activities in the Senate and the House.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LobbyingResult> StockLobbyingAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// USA Spending
        /// </summary>
        /// <remarks>
        /// Get a list of government's spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsaSpendingResult> StockUsaSpendingAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// USA Spending
        /// </summary>
        /// <remarks>
        /// Get a list of government's spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UsaSpendingResult> StockUsaSpendingAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Congressional Trading
        /// </summary>
        /// <remarks>
        /// Get stock trades data disclosed by members of congress.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CongressionalTrading> CongressionalTradingAsync(string symbol, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Congressional Trading
        /// </summary>
        /// <remarks>
        /// Get stock trades data disclosed by members of congress.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CongressionalTrading> CongressionalTradingAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Bond Profile
        /// </summary>
        /// <remarks>
        /// Get general information of a bond. You can query by FIGI, ISIN or CUSIP. A list of supported bonds can be found &lt;a href="/api/v1/bond/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <param name="figi">FIGI</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondProfile> BondProfileAsync(string isin, string cusip, string figi);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bond Profile
        /// </summary>
        /// <remarks>
        /// Get general information of a bond. You can query by FIGI, ISIN or CUSIP. A list of supported bonds can be found &lt;a href="/api/v1/bond/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <param name="figi">FIGI</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondProfile> BondProfileAsync(string isin, string cusip, string figi, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Bond price data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get bond's price data. The following datasets are supported:&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>  &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;US Government Bonds&lt;/th&gt;
        /// <br/>      &lt;td&gt;Government Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;144A Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondCandles> BondPriceAsync(string isin, long from, long to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bond price data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get bond's price data. The following datasets are supported:&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>  &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;US Government Bonds&lt;/th&gt;
        /// <br/>      &lt;td&gt;Government Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;144A Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondCandles> BondPriceAsync(string isin, long from, long to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Bond Tick Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get trade-level data for bonds. The following datasets are supported:&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;144A Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <param name="exchange">Currently support the following values: &lt;code&gt;trace&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondTickData> BondTickAsync(string isin, System.DateTime date, long limit, long skip, string exchange);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bond Tick Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get trade-level data for bonds. The following datasets are supported:&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;144A Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <param name="exchange">Currently support the following values: &lt;code&gt;trace&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondTickData> BondTickAsync(string isin, System.DateTime date, long limit, long skip, string exchange, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Bond Yield Curve
        /// </summary>
        /// <remarks>
        /// Get yield curve data for Treasury bonds.
        /// </remarks>
        /// <param name="code">Bond's code. You can find the list of supported code &lt;a href="https://docs.google.com/spreadsheets/d/1iA-lM0Kht7lsQZ7Uu_s6r2i1BbQNUNO9eGkO5-zglHg/edit?usp=sharing" target="_blank" rel="noopener"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondYieldCurve> BondYieldCurveAsync(string code);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bond Yield Curve
        /// </summary>
        /// <remarks>
        /// Get yield curve data for Treasury bonds.
        /// </remarks>
        /// <param name="code">Bond's code. You can find the list of supported code &lt;a href="https://docs.google.com/spreadsheets/d/1iA-lM0Kht7lsQZ7Uu_s6r2i1BbQNUNO9eGkO5-zglHg/edit?usp=sharing" target="_blank" rel="noopener"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondYieldCurve> BondYieldCurveAsync(string code, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Airline Price Index
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The Flight Ticket Price Index API provides comprehensive data on airline ticket prices, including the average daily ticket price and its percentage change (price index). This data, collected weekly and projected two weeks ahead, aggregates daily prices and indexes from the 50 busiest and largest airports across the USA. The dataset includes detailed information on airlines, dates, and average ticket prices, offering valuable insights for market analysis and pricing strategies.&lt;/p&gt;&lt;p&gt;The price index is calculated as percentage change of average daily ticket price from the previous weekly reading. Raw ticket prices data is available for Enterprise users. &lt;a href="mailto:support@finnhub.io"&gt;Contact us&lt;/a&gt; to inquire about the raw price data.&lt;/p&gt;
        /// </remarks>
        /// <param name="airline">Filter data by airline. Accepted values: &lt;code&gt;united&lt;/code&gt;,&lt;code&gt;delta&lt;/code&gt;,&lt;code&gt;american_airlines&lt;/code&gt;,&lt;code&gt;southwest&lt;/code&gt;,&lt;code&gt;southern_airways_express&lt;/code&gt;,&lt;code&gt;alaska_airlines&lt;/code&gt;,&lt;code&gt;frontier_airlines&lt;/code&gt;,&lt;code&gt;jetblue_airways&lt;/code&gt;,&lt;code&gt;spirit_airlines&lt;/code&gt;,&lt;code&gt;sun_country_airlines&lt;/code&gt;,&lt;code&gt;breeze_airways&lt;/code&gt;,&lt;code&gt;hawaiian_airlines&lt;/code&gt;</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AirlinePriceIndexData> AirlinePriceIndexAsync(string airline, System.DateTime from, System.DateTime to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Airline Price Index
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The Flight Ticket Price Index API provides comprehensive data on airline ticket prices, including the average daily ticket price and its percentage change (price index). This data, collected weekly and projected two weeks ahead, aggregates daily prices and indexes from the 50 busiest and largest airports across the USA. The dataset includes detailed information on airlines, dates, and average ticket prices, offering valuable insights for market analysis and pricing strategies.&lt;/p&gt;&lt;p&gt;The price index is calculated as percentage change of average daily ticket price from the previous weekly reading. Raw ticket prices data is available for Enterprise users. &lt;a href="mailto:support@finnhub.io"&gt;Contact us&lt;/a&gt; to inquire about the raw price data.&lt;/p&gt;
        /// </remarks>
        /// <param name="airline">Filter data by airline. Accepted values: &lt;code&gt;united&lt;/code&gt;,&lt;code&gt;delta&lt;/code&gt;,&lt;code&gt;american_airlines&lt;/code&gt;,&lt;code&gt;southwest&lt;/code&gt;,&lt;code&gt;southern_airways_express&lt;/code&gt;,&lt;code&gt;alaska_airlines&lt;/code&gt;,&lt;code&gt;frontier_airlines&lt;/code&gt;,&lt;code&gt;jetblue_airways&lt;/code&gt;,&lt;code&gt;spirit_airlines&lt;/code&gt;,&lt;code&gt;sun_country_airlines&lt;/code&gt;,&lt;code&gt;breeze_airways&lt;/code&gt;,&lt;code&gt;hawaiian_airlines&lt;/code&gt;</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AirlinePriceIndexData> AirlinePriceIndexAsync(string airline, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Country Metadata
        /// </summary>
        /// <remarks>
        /// List all countries and metadata.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CountryMetadata>> CountryAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Country Metadata
        /// </summary>
        /// <remarks>
        /// List all countries and metadata.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CountryMetadata>> CountryAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Economic Calendar
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get recent and upcoming economic releases.&lt;/p&gt;&lt;p&gt;Historical events and surprises are available for Enterprise clients.&lt;/p&gt;
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EconomicCalendar> EconomicCalendarAsync(System.DateTime? from, System.DateTime? to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Economic Calendar
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get recent and upcoming economic releases.&lt;/p&gt;&lt;p&gt;Historical events and surprises are available for Enterprise clients.&lt;/p&gt;
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EconomicCalendar> EconomicCalendarAsync(System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Economic Code
        /// </summary>
        /// <remarks>
        /// List codes of supported economic data.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicCode>> EconomicCodeAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Economic Code
        /// </summary>
        /// <remarks>
        /// List codes of supported economic data.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicCode>> EconomicCodeAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Economic Data
        /// </summary>
        /// <remarks>
        /// Get economic data.
        /// </remarks>
        /// <param name="code">Economic code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EconomicData> EconomicDataAsync(string code);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Economic Data
        /// </summary>
        /// <remarks>
        /// Get economic data.
        /// </remarks>
        /// <param name="code">Economic code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EconomicData> EconomicDataAsync(string code, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// International Filings
        /// </summary>
        /// <remarks>
        /// List filings for international companies. Limit to 500 documents at a time. These are the documents we use to source our fundamental data. Enterprise clients who need access to the full filings for global markets should contact us for the access.
        /// </remarks>
        /// <param name="symbol">Symbol. Leave empty to list latest filings.</param>
        /// <param name="country">Filter by country using country's 2-letter code.</param>
        /// <param name="from">From date: 2023-01-15.</param>
        /// <param name="to">To date: 2023-12-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InternationalFiling>> InternationalFilingsAsync(string symbol, string country, System.DateTime? from, System.DateTime? to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// International Filings
        /// </summary>
        /// <remarks>
        /// List filings for international companies. Limit to 500 documents at a time. These are the documents we use to source our fundamental data. Enterprise clients who need access to the full filings for global markets should contact us for the access.
        /// </remarks>
        /// <param name="symbol">Symbol. Leave empty to list latest filings.</param>
        /// <param name="country">Filter by country using country's 2-letter code.</param>
        /// <param name="from">From date: 2023-01-15.</param>
        /// <param name="to">To date: 2023-12-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InternationalFiling>> InternationalFilingsAsync(string symbol, string country, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Revenue Breakdown &amp; KPI
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get standardized revenue breakdown and KPIs data for 30,000+ global companies.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevenueBreakdown2> RevenueBreakdown2Async(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revenue Breakdown &amp; KPI
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get standardized revenue breakdown and KPIs data for 30,000+ global companies.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevenueBreakdown2> RevenueBreakdown2Async(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// AI Copilot
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Chat with our AI copilot powered by Neyman AI trained on the extensive Finnhub's global data. You can ask it any finance-related questions just like with other LLM models and receive results in texts and widgets.&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AIChatResponse> AiChatAsync(AIChatBody search);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// AI Copilot
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Chat with our AI copilot powered by Neyman AI trained on the extensive Finnhub's global data. You can ask it any finance-related questions just like with other LLM models and receive results in texts and widgets.&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AIChatResponse> AiChatAsync(AIChatBody search, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Global Filings Search
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for best-matched filings across global companies' filings, transcripts and press releases. You can filter by anything from symbol, ISIN to form type, and document sources.&lt;/p&gt;&lt;p&gt;This endpoint will return a list of documents that match your search criteria. If you would like to get the excerpts as well, please set &lt;code&gt;highlighted&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Once you have the list of documents, you can get a list of excerpts and positions to highlight the document using the &lt;code&gt;/search-in-filing&lt;/code&gt; endpoint&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResponse> GlobalFilingsSearchAsync(SearchBody search);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Global Filings Search
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for best-matched filings across global companies' filings, transcripts and press releases. You can filter by anything from symbol, ISIN to form type, and document sources.&lt;/p&gt;&lt;p&gt;This endpoint will return a list of documents that match your search criteria. If you would like to get the excerpts as well, please set &lt;code&gt;highlighted&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Once you have the list of documents, you can get a list of excerpts and positions to highlight the document using the &lt;code&gt;/search-in-filing&lt;/code&gt; endpoint&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResponse> GlobalFilingsSearchAsync(SearchBody search, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search In Filing
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a list of excerpts and highlight positions within a document using your query.&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InFilingResponse> SearchInFilingAsync(InFilingSearchBody search);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search In Filing
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a list of excerpts and highlight positions within a document using your query.&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InFilingResponse> SearchInFilingAsync(InFilingSearchBody search, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search Filter
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get available values for each filter in search body.&lt;/p&gt;
        /// </remarks>
        /// <param name="field">Field to get available filters. Available filters are "countries", "exchanges", "exhibits", "forms", "gics", "naics", "caps", "acts", and "sort".</param>
        /// <param name="source">Get available forms for each source.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchFilter> GlobalFilingsSearchFilterAsync(string field, string source);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search Filter
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get available values for each filter in search body.&lt;/p&gt;
        /// </remarks>
        /// <param name="field">Field to get available filters. Available filters are "countries", "exchanges", "exhibits", "forms", "gics", "naics", "caps", "acts", and "sort".</param>
        /// <param name="source">Get available forms for each source.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchFilter> GlobalFilingsSearchFilterAsync(string field, string source, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download Filings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Download filings using document ids.&lt;/p&gt;
        /// </remarks>
        /// <param name="documentId">Document's id. Note that this is different from filingId as 1 filing can contain multiple documents.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GlobalFilingsDownloadAsync(string documentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download Filings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Download filings using document ids.&lt;/p&gt;
        /// </remarks>
        /// <param name="documentId">Document's id. Note that this is different from filingId as 1 filing can contain multiple documents.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GlobalFilingsDownloadAsync(string documentId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinnhubClient : IFinnhubClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public FinnhubClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://finnhub.io/api/v1";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Symbol Lookup
        /// </summary>
        /// <remarks>
        /// Search for best-matching symbols based on your query. You can input anything from symbol, security's name to ISIN and Cusip.
        /// </remarks>
        /// <param name="q">Query text can be symbol, name, isin, or cusip.</param>
        /// <param name="exchange">Exchange limit.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SymbolLookup> SymbolSearchAsync(string q, string exchange)
        {
            return SymbolSearchAsync(q, exchange, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Symbol Lookup
        /// </summary>
        /// <remarks>
        /// Search for best-matching symbols based on your query. You can input anything from symbol, security's name to ISIN and Cusip.
        /// </remarks>
        /// <param name="q">Query text can be symbol, name, isin, or cusip.</param>
        /// <param name="exchange">Exchange limit.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SymbolLookup> SymbolSearchAsync(string q, string exchange, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "search"
                    urlBuilder_.Append("search");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("q")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (exchange != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exchange")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exchange, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SymbolLookup>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stock Symbol
        /// </summary>
        /// <remarks>
        /// List supported stocks. We use the following symbology to identify stocks on Finnhub &lt;code&gt;Exchange_Ticker.Exchange_Code&lt;/code&gt;. A list of supported exchange codes can be found &lt;a href="https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href="https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <param name="mic">Filter by MIC code.</param>
        /// <param name="securityType">Filter by security type used by OpenFigi standard.</param>
        /// <param name="currency">Filter by currency.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockSymbol>> StockSymbolsAsync(string exchange, string mic, string securityType, string currency)
        {
            return StockSymbolsAsync(exchange, mic, securityType, currency, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stock Symbol
        /// </summary>
        /// <remarks>
        /// List supported stocks. We use the following symbology to identify stocks on Finnhub &lt;code&gt;Exchange_Ticker.Exchange_Code&lt;/code&gt;. A list of supported exchange codes can be found &lt;a href="https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href="https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <param name="mic">Filter by MIC code.</param>
        /// <param name="securityType">Filter by security type used by OpenFigi standard.</param>
        /// <param name="currency">Filter by currency.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockSymbol>> StockSymbolsAsync(string exchange, string mic, string securityType, string currency, System.Threading.CancellationToken cancellationToken)
        {
            if (exchange == null)
                throw new System.ArgumentNullException("exchange");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/symbol"
                    urlBuilder_.Append("stock/symbol");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("exchange")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exchange, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (mic != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("mic")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mic, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (securityType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("securityType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(securityType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StockSymbol>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Market Status
        /// </summary>
        /// <remarks>
        /// Get current market status for global exchanges (whether exchanges are open or close).
        /// </remarks>
        /// <param name="exchange">Exchange code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarketStatus> MarketStatusAsync(string exchange)
        {
            return MarketStatusAsync(exchange, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Market Status
        /// </summary>
        /// <remarks>
        /// Get current market status for global exchanges (whether exchanges are open or close).
        /// </remarks>
        /// <param name="exchange">Exchange code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarketStatus> MarketStatusAsync(string exchange, System.Threading.CancellationToken cancellationToken)
        {
            if (exchange == null)
                throw new System.ArgumentNullException("exchange");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/market-status"
                    urlBuilder_.Append("stock/market-status");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("exchange")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exchange, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarketStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Market Holiday
        /// </summary>
        /// <remarks>
        /// Get a list of holidays for global exchanges.
        /// </remarks>
        /// <param name="exchange">Exchange code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarketHoliday> MarketHolidayAsync(string exchange)
        {
            return MarketHolidayAsync(exchange, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Market Holiday
        /// </summary>
        /// <remarks>
        /// Get a list of holidays for global exchanges.
        /// </remarks>
        /// <param name="exchange">Exchange code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarketHoliday> MarketHolidayAsync(string exchange, System.Threading.CancellationToken cancellationToken)
        {
            if (exchange == null)
                throw new System.ArgumentNullException("exchange");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/market-holiday"
                    urlBuilder_.Append("stock/market-holiday");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("exchange")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exchange, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarketHoliday>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company Profile
        /// </summary>
        /// <remarks>
        /// Get general information of a company. You can query by symbol, ISIN or CUSIP
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL e.g.</param>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyProfile> CompanyProfileAsync(string symbol, string isin, string cusip)
        {
            return CompanyProfileAsync(symbol, isin, cusip, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Profile
        /// </summary>
        /// <remarks>
        /// Get general information of a company. You can query by symbol, ISIN or CUSIP
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL e.g.</param>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyProfile> CompanyProfileAsync(string symbol, string isin, string cusip, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/profile"
                    urlBuilder_.Append("stock/profile");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cusip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cusip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cusip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyProfile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company Profile 2
        /// </summary>
        /// <remarks>
        /// Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of &lt;a href="#company-profile"&gt;Company Profile&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL e.g.</param>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyProfile2> CompanyProfile2Async(string symbol, string isin, string cusip)
        {
            return CompanyProfile2Async(symbol, isin, cusip, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Profile 2
        /// </summary>
        /// <remarks>
        /// Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of &lt;a href="#company-profile"&gt;Company Profile&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL e.g.</param>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyProfile2> CompanyProfile2Async(string symbol, string isin, string cusip, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/profile2"
                    urlBuilder_.Append("stock/profile2");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cusip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cusip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cusip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyProfile2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company Executive
        /// </summary>
        /// <remarks>
        /// Get a list of company's executives and members of the Board.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyExecutive> CompanyExecutiveAsync(string symbol)
        {
            return CompanyExecutiveAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Executive
        /// </summary>
        /// <remarks>
        /// Get a list of company's executives and members of the Board.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyExecutive> CompanyExecutiveAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/executive"
                    urlBuilder_.Append("stock/executive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyExecutive>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Market News
        /// </summary>
        /// <remarks>
        /// Get latest market news.
        /// </remarks>
        /// <param name="category">This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.</param>
        /// <param name="minId">Use this field to get only news after this ID. Default to 0</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarketNews>> MarketNewsAsync(string category, long? minId)
        {
            return MarketNewsAsync(category, minId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Market News
        /// </summary>
        /// <remarks>
        /// Get latest market news.
        /// </remarks>
        /// <param name="category">This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.</param>
        /// <param name="minId">Use this field to get only news after this ID. Default to 0</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarketNews>> MarketNewsAsync(string category, long? minId, System.Threading.CancellationToken cancellationToken)
        {
            if (category == null)
                throw new System.ArgumentNullException("category");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "news"
                    urlBuilder_.Append("news");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("category")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (minId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MarketNews>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company News
        /// </summary>
        /// <remarks>
        /// List latest company news by symbol. This endpoint is only available for North American companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyNews>> CompanyNewsAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return CompanyNewsAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company News
        /// </summary>
        /// <remarks>
        /// List latest company news by symbol. This endpoint is only available for North American companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyNews>> CompanyNewsAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "company-news"
                    urlBuilder_.Append("company-news");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CompanyNews>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Major Press Releases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.&lt;/p&gt;&lt;p&gt;Full-text press releases data is available for Enterprise clients. &lt;a href="mailto:support@finnhub.io"&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From time: 2020-01-01.</param>
        /// <param name="to">To time: 2020-01-05.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PressRelease> PressReleasesAsync(string symbol, System.DateTime? from, System.DateTime? to)
        {
            return PressReleasesAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Major Press Releases
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.&lt;/p&gt;&lt;p&gt;Full-text press releases data is available for Enterprise clients. &lt;a href="mailto:support@finnhub.io"&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From time: 2020-01-01.</param>
        /// <param name="to">To time: 2020-01-05.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PressRelease> PressReleasesAsync(string symbol, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "press-releases"
                    urlBuilder_.Append("press-releases");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PressRelease>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// News Sentiment
        /// </summary>
        /// <remarks>
        /// Get company's news sentiment and statistics. This endpoint is only available for US companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NewsSentiment> NewsSentimentAsync(string symbol)
        {
            return NewsSentimentAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// News Sentiment
        /// </summary>
        /// <remarks>
        /// Get company's news sentiment and statistics. This endpoint is only available for US companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NewsSentiment> NewsSentimentAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "news-sentiment"
                    urlBuilder_.Append("news-sentiment");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewsSentiment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Peers
        /// </summary>
        /// <remarks>
        /// Get company peers. Return a list of peers operating in the same country and sector/industry.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="grouping">Specify the grouping criteria for choosing peers.Supporter values: &lt;code&gt;sector&lt;/code&gt;, &lt;code&gt;industry&lt;/code&gt;, &lt;code&gt;subIndustry&lt;/code&gt;. Default to &lt;code&gt;subIndustry&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CompanyPeersAsync(string symbol, string grouping)
        {
            return CompanyPeersAsync(symbol, grouping, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Peers
        /// </summary>
        /// <remarks>
        /// Get company peers. Return a list of peers operating in the same country and sector/industry.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="grouping">Specify the grouping criteria for choosing peers.Supporter values: &lt;code&gt;sector&lt;/code&gt;, &lt;code&gt;industry&lt;/code&gt;, &lt;code&gt;subIndustry&lt;/code&gt;. Default to &lt;code&gt;subIndustry&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CompanyPeersAsync(string symbol, string grouping, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/peers"
                    urlBuilder_.Append("stock/peers");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (grouping != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("grouping")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(grouping, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Basic Financials
        /// </summary>
        /// <remarks>
        /// Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="metric">Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BasicFinancials> CompanyBasicFinancialsAsync(string symbol, string metric)
        {
            return CompanyBasicFinancialsAsync(symbol, metric, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Basic Financials
        /// </summary>
        /// <remarks>
        /// Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="metric">Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BasicFinancials> CompanyBasicFinancialsAsync(string symbol, string metric, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (metric == null)
                throw new System.ArgumentNullException("metric");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/metric"
                    urlBuilder_.Append("stock/metric");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("metric")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(metric, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BasicFinancials>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Price Metrics
        /// </summary>
        /// <remarks>
        /// Get company price performance statistics such as 52-week high/low, YTD return and much more.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="date">Get data on a specific date in the past. The data is available weekly so your date will be automatically adjusted to the last day of that week.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PriceMetrics> PriceMetricsAsync(string symbol, string date)
        {
            return PriceMetricsAsync(symbol, date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Price Metrics
        /// </summary>
        /// <remarks>
        /// Get company price performance statistics such as 52-week high/low, YTD return and much more.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="date">Get data on a specific date in the past. The data is available weekly so your date will be automatically adjusted to the last day of that week.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PriceMetrics> PriceMetricsAsync(string symbol, string date, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/price-metric"
                    urlBuilder_.Append("stock/price-metric");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PriceMetrics>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Symbol Change
        /// </summary>
        /// <remarks>
        /// Get a list of symbol changes for US-listed, EU-listed, NSE and ASX securities. Limit to 2000 events at a time.
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SymbolChange> SymbolChangeAsync(string from, string to)
        {
            return SymbolChangeAsync(from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Symbol Change
        /// </summary>
        /// <remarks>
        /// Get a list of symbol changes for US-listed, EU-listed, NSE and ASX securities. Limit to 2000 events at a time.
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SymbolChange> SymbolChangeAsync(string from, string to, System.Threading.CancellationToken cancellationToken)
        {
            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "ca/symbol-change"
                    urlBuilder_.Append("ca/symbol-change");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SymbolChange>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// ISIN Change
        /// </summary>
        /// <remarks>
        /// Get a list of ISIN changes for EU-listed securities. Limit to 2000 events at a time.
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IsinChange> IsinChangeAsync(string from, string to)
        {
            return IsinChangeAsync(from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ISIN Change
        /// </summary>
        /// <remarks>
        /// Get a list of ISIN changes for EU-listed securities. Limit to 2000 events at a time.
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IsinChange> IsinChangeAsync(string from, string to, System.Threading.CancellationToken cancellationToken)
        {
            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "ca/isin-change"
                    urlBuilder_.Append("ca/isin-change");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IsinChange>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Historical Market Cap
        /// </summary>
        /// <remarks>
        /// Get historical market cap data for global companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HistoricalMarketCapData> HistoricalMarketCapAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return HistoricalMarketCapAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Historical Market Cap
        /// </summary>
        /// <remarks>
        /// Get historical market cap data for global companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HistoricalMarketCapData> HistoricalMarketCapAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/historical-market-cap"
                    urlBuilder_.Append("stock/historical-market-cap");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoricalMarketCapData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Historical Employee Count
        /// </summary>
        /// <remarks>
        /// Get historical employee count for global companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HistoricalEmployeeCount> HistoricalEmployeeCountAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return HistoricalEmployeeCountAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Historical Employee Count
        /// </summary>
        /// <remarks>
        /// Get historical employee count for global companies.
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HistoricalEmployeeCount> HistoricalEmployeeCountAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/historical-employee-count"
                    urlBuilder_.Append("stock/historical-employee-count");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoricalEmployeeCount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Institutional Profile
        /// </summary>
        /// <remarks>
        /// Get a list of well-known institutional investors. Currently support 60+ profiles.
        /// </remarks>
        /// <param name="cik">Filter by CIK. Leave blank to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InstitutionalProfile> InstitutionalProfileAsync(string cik)
        {
            return InstitutionalProfileAsync(cik, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Institutional Profile
        /// </summary>
        /// <remarks>
        /// Get a list of well-known institutional investors. Currently support 60+ profiles.
        /// </remarks>
        /// <param name="cik">Filter by CIK. Leave blank to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InstitutionalProfile> InstitutionalProfileAsync(string cik, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "institutional/profile"
                    urlBuilder_.Append("institutional/profile");
                    urlBuilder_.Append('?');
                    if (cik != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cik")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cik, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InstitutionalProfile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Institutional Portfolio
        /// </summary>
        /// <remarks>
        /// Get the holdings/portfolio data of institutional investors from 13-F filings. Limit to 1 year of data at a time. You can get a list of supported CIK &lt;a href="/api/v1/institutional/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="cik">Fund's CIK.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InstitutionalPortfolio> InstitutionalPortfolioAsync(string cik, string from, string to)
        {
            return InstitutionalPortfolioAsync(cik, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Institutional Portfolio
        /// </summary>
        /// <remarks>
        /// Get the holdings/portfolio data of institutional investors from 13-F filings. Limit to 1 year of data at a time. You can get a list of supported CIK &lt;a href="/api/v1/institutional/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="cik">Fund's CIK.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InstitutionalPortfolio> InstitutionalPortfolioAsync(string cik, string from, string to, System.Threading.CancellationToken cancellationToken)
        {
            if (cik == null)
                throw new System.ArgumentNullException("cik");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "institutional/portfolio"
                    urlBuilder_.Append("institutional/portfolio");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("cik")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cik, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InstitutionalPortfolio>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Institutional Ownership
        /// </summary>
        /// <remarks>
        /// Get a list institutional investors' positions for a particular stock overtime. Data from 13-F filings. Limit to 1 year of data at a time.
        /// </remarks>
        /// <param name="symbol">Filter by symbol.</param>
        /// <param name="cusip">Filter by CUSIP.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InstitutionalOwnership> InstitutionalOwnershipAsync(string symbol, string cusip, string from, string to)
        {
            return InstitutionalOwnershipAsync(symbol, cusip, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Institutional Ownership
        /// </summary>
        /// <remarks>
        /// Get a list institutional investors' positions for a particular stock overtime. Data from 13-F filings. Limit to 1 year of data at a time.
        /// </remarks>
        /// <param name="symbol">Filter by symbol.</param>
        /// <param name="cusip">Filter by CUSIP.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InstitutionalOwnership> InstitutionalOwnershipAsync(string symbol, string cusip, string from, string to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (cusip == null)
                throw new System.ArgumentNullException("cusip");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "institutional/ownership"
                    urlBuilder_.Append("institutional/ownership");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("cusip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cusip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InstitutionalOwnership>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Ownership
        /// </summary>
        /// <remarks>
        /// Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of results. Leave empty to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ownership> OwnershipAsync(string symbol, long? limit)
        {
            return OwnershipAsync(symbol, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ownership
        /// </summary>
        /// <remarks>
        /// Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of results. Leave empty to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ownership> OwnershipAsync(string symbol, long? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/ownership"
                    urlBuilder_.Append("stock/ownership");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ownership>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fund Ownership
        /// </summary>
        /// <remarks>
        /// Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of results. Leave empty to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FundOwnership> FundOwnershipAsync(string symbol, long? limit)
        {
            return FundOwnershipAsync(symbol, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fund Ownership
        /// </summary>
        /// <remarks>
        /// Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of results. Leave empty to get the full list.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FundOwnership> FundOwnershipAsync(string symbol, long? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/fund-ownership"
                    urlBuilder_.Append("stock/fund-ownership");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FundOwnership>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Insider Transactions
        /// </summary>
        /// <remarks>
        /// Company insider transactions data sourced from &lt;code&gt;Form 3,4,5&lt;/code&gt;, SEDI and relevant companies' filings. This endpoint covers US, UK, Canada, Australia, India, and all major EU markets. Limit to 100 transactions per API call.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL. Leave this param blank to get the latest transactions.</param>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InsiderTransactions> InsiderTransactionsAsync(string symbol, System.DateTime? from, System.DateTime? to)
        {
            return InsiderTransactionsAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Insider Transactions
        /// </summary>
        /// <remarks>
        /// Company insider transactions data sourced from &lt;code&gt;Form 3,4,5&lt;/code&gt;, SEDI and relevant companies' filings. This endpoint covers US, UK, Canada, Australia, India, and all major EU markets. Limit to 100 transactions per API call.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL. Leave this param blank to get the latest transactions.</param>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InsiderTransactions> InsiderTransactionsAsync(string symbol, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/insider-transactions"
                    urlBuilder_.Append("stock/insider-transactions");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InsiderTransactions>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Insider Sentiment
        /// </summary>
        /// <remarks>
        /// Get insider sentiment data for US companies calculated using method discussed &lt;a href="https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a" target="_blank"&gt;here&lt;/a&gt;. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InsiderSentiments> InsiderSentimentAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return InsiderSentimentAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Insider Sentiment
        /// </summary>
        /// <remarks>
        /// Get insider sentiment data for US companies calculated using method discussed &lt;a href="https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a" target="_blank"&gt;here&lt;/a&gt;. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InsiderSentiments> InsiderSentimentAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/insider-sentiment"
                    urlBuilder_.Append("stock/insider-sentiment");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InsiderSentiments>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Financial Statements
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through &lt;a href="#filings"&gt;SEC Filings&lt;/a&gt; and &lt;a href="#international-filings"&gt;International Filings&lt;/a&gt; endpoints.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&amp;P or Yahoo Finance ? Check out our &lt;a href="/faq"&gt;FAQ page&lt;/a&gt; to learn more&lt;/i&gt;&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="statement">Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.</param>
        /// <param name="freq">Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FinancialStatements> FinancialsAsync(string symbol, string statement, string freq)
        {
            return FinancialsAsync(symbol, statement, freq, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Financial Statements
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through &lt;a href="#filings"&gt;SEC Filings&lt;/a&gt; and &lt;a href="#international-filings"&gt;International Filings&lt;/a&gt; endpoints.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&amp;P or Yahoo Finance ? Check out our &lt;a href="/faq"&gt;FAQ page&lt;/a&gt; to learn more&lt;/i&gt;&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="statement">Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.</param>
        /// <param name="freq">Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FinancialStatements> FinancialsAsync(string symbol, string statement, string freq, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (statement == null)
                throw new System.ArgumentNullException("statement");

            if (freq == null)
                throw new System.ArgumentNullException("freq");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/financials"
                    urlBuilder_.Append("stock/financials");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("statement")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(statement, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("freq")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(freq, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FinancialStatements>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Financials As Reported
        /// </summary>
        /// <remarks>
        /// Get financials as reported. This data is available for bulk download on &lt;a href="https://www.kaggle.com/finnhub/reported-financials" target="_blank"&gt;Kaggle SEC Financials database&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="cik">CIK.</param>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve financials from.</param>
        /// <param name="freq">Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for endDate.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for endDate.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FinancialsAsReported> FinancialsReportedAsync(string symbol, string cik, string accessNumber, string freq, System.DateTime? from, System.DateTime? to)
        {
            return FinancialsReportedAsync(symbol, cik, accessNumber, freq, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Financials As Reported
        /// </summary>
        /// <remarks>
        /// Get financials as reported. This data is available for bulk download on &lt;a href="https://www.kaggle.com/finnhub/reported-financials" target="_blank"&gt;Kaggle SEC Financials database&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="cik">CIK.</param>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve financials from.</param>
        /// <param name="freq">Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for endDate.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for endDate.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FinancialsAsReported> FinancialsReportedAsync(string symbol, string cik, string accessNumber, string freq, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/financials-reported"
                    urlBuilder_.Append("stock/financials-reported");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cik != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cik")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cik, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accessNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accessNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accessNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (freq != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("freq")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(freq, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FinancialsAsReported>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revenue Breakdown
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get revenue breakdown as-reporetd by product and geography. Users on personal plans can access data for US companies which disclose their revenue breakdown in the annual or quarterly reports.&lt;/p&gt;&lt;p&gt;Global standardized revenue breakdown/segments data is available for Enterprise users. &lt;a href="mailto:support@finnhub.io"&gt;Contact us&lt;/a&gt; to inquire about the access for Global standardized data.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="cik">CIK.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RevenueBreakdown> RevenueBreakdownAsync(string symbol, string cik)
        {
            return RevenueBreakdownAsync(symbol, cik, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revenue Breakdown
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get revenue breakdown as-reporetd by product and geography. Users on personal plans can access data for US companies which disclose their revenue breakdown in the annual or quarterly reports.&lt;/p&gt;&lt;p&gt;Global standardized revenue breakdown/segments data is available for Enterprise users. &lt;a href="mailto:support@finnhub.io"&gt;Contact us&lt;/a&gt; to inquire about the access for Global standardized data.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="cik">CIK.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RevenueBreakdown> RevenueBreakdownAsync(string symbol, string cik, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/revenue-breakdown"
                    urlBuilder_.Append("stock/revenue-breakdown");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cik != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cik")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cik, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevenueBreakdown>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// SEC Filings
        /// </summary>
        /// <remarks>
        /// List company's filing. Limit to 250 documents at a time. This data is available for bulk download on &lt;a href="https://www.kaggle.com/finnhub/sec-filings" target="_blank"&gt;Kaggle SEC Filings database&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.</param>
        /// <param name="cik">CIK.</param>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve data from.</param>
        /// <param name="form">Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.</param>
        /// <param name="from">From date: 2023-03-15.</param>
        /// <param name="to">To date: 2023-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Filing>> FilingsAsync(string symbol, string cik, string accessNumber, string form, System.DateTime? from, System.DateTime? to)
        {
            return FilingsAsync(symbol, cik, accessNumber, form, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// SEC Filings
        /// </summary>
        /// <remarks>
        /// List company's filing. Limit to 250 documents at a time. This data is available for bulk download on &lt;a href="https://www.kaggle.com/finnhub/sec-filings" target="_blank"&gt;Kaggle SEC Filings database&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.</param>
        /// <param name="cik">CIK.</param>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve data from.</param>
        /// <param name="form">Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.</param>
        /// <param name="from">From date: 2023-03-15.</param>
        /// <param name="to">To date: 2023-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Filing>> FilingsAsync(string symbol, string cik, string accessNumber, string form, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/filings"
                    urlBuilder_.Append("stock/filings");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cik != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cik")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cik, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accessNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accessNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accessNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (form != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("form")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(form, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Filing>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// SEC Sentiment Analysis
        /// </summary>
        /// <remarks>
        /// Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company's stock price in the upcoming 4 quarters. We make use of &lt;a href= "https://sraf.nd.edu/textual-analysis/resources/" target="_blank"&gt;Loughran and McDonald Sentiment Word Lists&lt;/a&gt; to calculate the sentiment for each filing.
        /// </remarks>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve data from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SECSentimentAnalysis> FilingsSentimentAsync(string accessNumber)
        {
            return FilingsSentimentAsync(accessNumber, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// SEC Sentiment Analysis
        /// </summary>
        /// <remarks>
        /// Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company's stock price in the upcoming 4 quarters. We make use of &lt;a href= "https://sraf.nd.edu/textual-analysis/resources/" target="_blank"&gt;Loughran and McDonald Sentiment Word Lists&lt;/a&gt; to calculate the sentiment for each filing.
        /// </remarks>
        /// <param name="accessNumber">Access number of a specific report you want to retrieve data from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SECSentimentAnalysis> FilingsSentimentAsync(string accessNumber, System.Threading.CancellationToken cancellationToken)
        {
            if (accessNumber == null)
                throw new System.ArgumentNullException("accessNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/filings-sentiment"
                    urlBuilder_.Append("stock/filings-sentiment");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("accessNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accessNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SECSentimentAnalysis>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Similarity Index
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Calculate the textual difference between a company's 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019's 10-K with 2018's 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company's stock price in the upcoming 4 quarters.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol. Required if cik is empty</param>
        /// <param name="cik">CIK. Required if symbol is empty</param>
        /// <param name="freq">&lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SimilarityIndex> SimilarityIndexAsync(string symbol, string cik, string freq)
        {
            return SimilarityIndexAsync(symbol, cik, freq, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Similarity Index
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Calculate the textual difference between a company's 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019's 10-K with 2018's 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company's stock price in the upcoming 4 quarters.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol. Required if cik is empty</param>
        /// <param name="cik">CIK. Required if symbol is empty</param>
        /// <param name="freq">&lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SimilarityIndex> SimilarityIndexAsync(string symbol, string cik, string freq, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/similarity-index"
                    urlBuilder_.Append("stock/similarity-index");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cik != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cik")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cik, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (freq != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("freq")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(freq, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SimilarityIndex>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// IPO Calendar
        /// </summary>
        /// <remarks>
        /// Get recent and upcoming IPO.
        /// </remarks>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IPOCalendar> IpoCalendarAsync(System.DateTime from, System.DateTime to)
        {
            return IpoCalendarAsync(from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// IPO Calendar
        /// </summary>
        /// <remarks>
        /// Get recent and upcoming IPO.
        /// </remarks>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IPOCalendar> IpoCalendarAsync(System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "calendar/ipo"
                    urlBuilder_.Append("calendar/ipo");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IPOCalendar>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sector Metrics
        /// </summary>
        /// <remarks>
        /// Get ratios for different sectors and regions/indices.
        /// </remarks>
        /// <param name="region">Region. A list of supported values for this field can be found &lt;a href="https://docs.google.com/spreadsheets/d/1afedyv7yWJ-z7pMjaAZK-f6ENY3mI3EBCk95QffpoHw/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SectorMetric> SectorMetricAsync(string region)
        {
            return SectorMetricAsync(region, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sector Metrics
        /// </summary>
        /// <remarks>
        /// Get ratios for different sectors and regions/indices.
        /// </remarks>
        /// <param name="region">Region. A list of supported values for this field can be found &lt;a href="https://docs.google.com/spreadsheets/d/1afedyv7yWJ-z7pMjaAZK-f6ENY3mI3EBCk95QffpoHw/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SectorMetric> SectorMetricAsync(string region, System.Threading.CancellationToken cancellationToken)
        {
            if (region == null)
                throw new System.ArgumentNullException("region");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sector/metrics"
                    urlBuilder_.Append("sector/metrics");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("region")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(region, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SectorMetric>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Dividends
        /// </summary>
        /// <remarks>
        /// Get dividends data for common stocks going back 30 years.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">YYYY-MM-DD.</param>
        /// <param name="to">YYYY-MM-DD.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Dividends>> StockDividendsAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return StockDividendsAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dividends
        /// </summary>
        /// <remarks>
        /// Get dividends data for common stocks going back 30 years.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">YYYY-MM-DD.</param>
        /// <param name="to">YYYY-MM-DD.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Dividends>> StockDividendsAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/dividend"
                    urlBuilder_.Append("stock/dividend");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Dividends>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Recommendation Trends
        /// </summary>
        /// <remarks>
        /// Get latest analyst recommendation trends for a company.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RecommendationTrend>> RecommendationTrendsAsync(string symbol)
        {
            return RecommendationTrendsAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recommendation Trends
        /// </summary>
        /// <remarks>
        /// Get latest analyst recommendation trends for a company.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RecommendationTrend>> RecommendationTrendsAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/recommendation"
                    urlBuilder_.Append("stock/recommendation");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RecommendationTrend>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Price Target
        /// </summary>
        /// <remarks>
        /// Get latest price target consensus.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PriceTarget> PriceTargetAsync(string symbol)
        {
            return PriceTargetAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Price Target
        /// </summary>
        /// <remarks>
        /// Get latest price target consensus.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PriceTarget> PriceTargetAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/price-target"
                    urlBuilder_.Append("stock/price-target");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PriceTarget>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stock Upgrade/Downgrade
        /// </summary>
        /// <remarks>
        /// Get latest stock upgrade and downgrade.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.</param>
        /// <param name="from">From date: 2000-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpgradeDowngrade>> UpgradeDowngradeAsync(string symbol, System.DateTime? from, System.DateTime? to)
        {
            return UpgradeDowngradeAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stock Upgrade/Downgrade
        /// </summary>
        /// <remarks>
        /// Get latest stock upgrade and downgrade.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.</param>
        /// <param name="from">From date: 2000-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpgradeDowngrade>> UpgradeDowngradeAsync(string symbol, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/upgrade-downgrade"
                    urlBuilder_.Append("stock/upgrade-downgrade");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UpgradeDowngrade>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revenue Estimates
        /// </summary>
        /// <remarks>
        /// Get company's revenue estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RevenueEstimates> CompanyRevenueEstimatesAsync(string symbol, string freq)
        {
            return CompanyRevenueEstimatesAsync(symbol, freq, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revenue Estimates
        /// </summary>
        /// <remarks>
        /// Get company's revenue estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RevenueEstimates> CompanyRevenueEstimatesAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/revenue-estimate"
                    urlBuilder_.Append("stock/revenue-estimate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (freq != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("freq")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(freq, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevenueEstimates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// EBITDA Estimates
        /// </summary>
        /// <remarks>
        /// Get company's ebitda estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EbitdaEstimates> CompanyEbitdaEstimatesAsync(string symbol, string freq)
        {
            return CompanyEbitdaEstimatesAsync(symbol, freq, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// EBITDA Estimates
        /// </summary>
        /// <remarks>
        /// Get company's ebitda estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EbitdaEstimates> CompanyEbitdaEstimatesAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/ebitda-estimate"
                    urlBuilder_.Append("stock/ebitda-estimate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (freq != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("freq")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(freq, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EbitdaEstimates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// EBIT Estimates
        /// </summary>
        /// <remarks>
        /// Get company's ebit estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EbitEstimates> CompanyEbitEstimatesAsync(string symbol, string freq)
        {
            return CompanyEbitEstimatesAsync(symbol, freq, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// EBIT Estimates
        /// </summary>
        /// <remarks>
        /// Get company's ebit estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EbitEstimates> CompanyEbitEstimatesAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/ebit-estimate"
                    urlBuilder_.Append("stock/ebit-estimate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (freq != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("freq")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(freq, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EbitEstimates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Earnings Estimates
        /// </summary>
        /// <remarks>
        /// Get company's EPS estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EarningsEstimates> CompanyEpsEstimatesAsync(string symbol, string freq)
        {
            return CompanyEpsEstimatesAsync(symbol, freq, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Estimates
        /// </summary>
        /// <remarks>
        /// Get company's EPS estimates.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="freq">Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EarningsEstimates> CompanyEpsEstimatesAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/eps-estimate"
                    urlBuilder_.Append("stock/eps-estimate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (freq != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("freq")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(freq, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EarningsEstimates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Earnings Surprises
        /// </summary>
        /// <remarks>
        /// Get company historical quarterly earnings surprise going back to 2000.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of period returned. Leave blank to get the full history.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EarningResult>> CompanyEarningsAsync(string symbol, long? limit)
        {
            return CompanyEarningsAsync(symbol, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Surprises
        /// </summary>
        /// <remarks>
        /// Get company historical quarterly earnings surprise going back to 2000.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="limit">Limit number of period returned. Leave blank to get the full history.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EarningResult>> CompanyEarningsAsync(string symbol, long? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/earnings"
                    urlBuilder_.Append("stock/earnings");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EarningResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Earnings Calendar
        /// </summary>
        /// <remarks>
        /// Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
        /// </remarks>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <param name="symbol">Filter by symbol: AAPL.</param>
        /// <param name="international">Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EarningsCalendar> EarningsCalendarAsync(System.DateTime? from, System.DateTime? to, string symbol, bool? international)
        {
            return EarningsCalendarAsync(from, to, symbol, international, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Calendar
        /// </summary>
        /// <remarks>
        /// Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
        /// </remarks>
        /// <param name="from">From date: 2020-03-15.</param>
        /// <param name="to">To date: 2020-03-16.</param>
        /// <param name="symbol">Filter by symbol: AAPL.</param>
        /// <param name="international">Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EarningsCalendar> EarningsCalendarAsync(System.DateTime? from, System.DateTime? to, string symbol, bool? international, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "calendar/earnings"
                    urlBuilder_.Append("calendar/earnings");
                    urlBuilder_.Append('?');
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (international != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("international")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(international, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EarningsCalendar>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Quote
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.&lt;/p&gt;&lt;p&gt;Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. &lt;a href="mailto:support@finnhub.io"&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Quote> QuoteAsync(string symbol)
        {
            return QuoteAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Quote
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.&lt;/p&gt;&lt;p&gt;Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. &lt;a href="mailto:support@finnhub.io"&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Quote> QuoteAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "quote"
                    urlBuilder_.Append("quote");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Quote>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stock Candles
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get candlestick data (OHLCV) for stocks.&lt;/p&gt;&lt;p&gt;Daily data will be adjusted for Splits. Intraday data will remain unadjusted. Only 1 month of intraday will be returned at a time. If you need more historical intraday data, please use the from and to params iteratively to request more data.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StockCandles> StockCandlesAsync(string symbol, string resolution, long from, long to)
        {
            return StockCandlesAsync(symbol, resolution, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stock Candles
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get candlestick data (OHLCV) for stocks.&lt;/p&gt;&lt;p&gt;Daily data will be adjusted for Splits. Intraday data will remain unadjusted. Only 1 month of intraday will be returned at a time. If you need more historical intraday data, please use the from and to params iteratively to request more data.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StockCandles> StockCandlesAsync(string symbol, string resolution, long from, long to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (resolution == null)
                throw new System.ArgumentNullException("resolution");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/candle"
                    urlBuilder_.Append("stock/candle");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("resolution")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resolution, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StockCandles>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Tick Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get historical tick data for global exchanges.&lt;/p&gt;&lt;p&gt;For more historical tick data, you can visit our bulk download page in the Dashboard &lt;a target="_blank" href="/dashboard/download",&gt;here&lt;/a&gt; to speed up the download process.&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;US CTA/UTP&lt;/th&gt;
        /// <br/>      &lt;td&gt;Full SIP&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;TSX&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt;&lt;li&gt;TSX&lt;/li&gt;&lt;li&gt;TSX Venture&lt;/li&gt;&lt;li&gt;Index&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;LSE&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt;&lt;li&gt;London Stock Exchange (L)&lt;/li&gt;&lt;li&gt;LSE International (L)&lt;/li&gt;&lt;li&gt;LSE European (L)&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;15 minute&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;Euronext&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt; &lt;li&gt;Euronext Paris (PA)&lt;/li&gt; &lt;li&gt;Euronext Amsterdam (AS)&lt;/li&gt; &lt;li&gt;Euronext Lisbon (LS)&lt;/li&gt; &lt;li&gt;Euronext Brussels (BR)&lt;/li&gt; &lt;li&gt;Euronext Oslo (OL)&lt;/li&gt; &lt;li&gt;Euronext London (LN)&lt;/li&gt; &lt;li&gt;Euronext Dublin (IR)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;Deutsche Börse&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt; &lt;li&gt;Frankfurt (F)&lt;/li&gt; &lt;li&gt;Xetra (DE)&lt;/li&gt; &lt;li&gt;Duesseldorf (DU)&lt;/li&gt; &lt;li&gt;Hamburg (HM)&lt;/li&gt; &lt;li&gt;Berlin (BE)&lt;/li&gt; &lt;li&gt;Hanover (HA)&lt;/li&gt; &lt;li&gt;Stoxx (SX)&lt;/li&gt; &lt;li&gt;TradeGate (TG)&lt;/li&gt; &lt;li&gt;Zertifikate (SC)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TickData> StockTickAsync(string symbol, System.DateTime date, long limit, long skip)
        {
            return StockTickAsync(symbol, date, limit, skip, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Tick Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get historical tick data for global exchanges.&lt;/p&gt;&lt;p&gt;For more historical tick data, you can visit our bulk download page in the Dashboard &lt;a target="_blank" href="/dashboard/download",&gt;here&lt;/a&gt; to speed up the download process.&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;US CTA/UTP&lt;/th&gt;
        /// <br/>      &lt;td&gt;Full SIP&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;TSX&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt;&lt;li&gt;TSX&lt;/li&gt;&lt;li&gt;TSX Venture&lt;/li&gt;&lt;li&gt;Index&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;LSE&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt;&lt;li&gt;London Stock Exchange (L)&lt;/li&gt;&lt;li&gt;LSE International (L)&lt;/li&gt;&lt;li&gt;LSE European (L)&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;15 minute&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;Euronext&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt; &lt;li&gt;Euronext Paris (PA)&lt;/li&gt; &lt;li&gt;Euronext Amsterdam (AS)&lt;/li&gt; &lt;li&gt;Euronext Lisbon (LS)&lt;/li&gt; &lt;li&gt;Euronext Brussels (BR)&lt;/li&gt; &lt;li&gt;Euronext Oslo (OL)&lt;/li&gt; &lt;li&gt;Euronext London (LN)&lt;/li&gt; &lt;li&gt;Euronext Dublin (IR)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;Deutsche Börse&lt;/th&gt;
        /// <br/>      &lt;td&gt;&lt;ul&gt; &lt;li&gt;Frankfurt (F)&lt;/li&gt; &lt;li&gt;Xetra (DE)&lt;/li&gt; &lt;li&gt;Duesseldorf (DU)&lt;/li&gt; &lt;li&gt;Hamburg (HM)&lt;/li&gt; &lt;li&gt;Berlin (BE)&lt;/li&gt; &lt;li&gt;Hanover (HA)&lt;/li&gt; &lt;li&gt;Stoxx (SX)&lt;/li&gt; &lt;li&gt;TradeGate (TG)&lt;/li&gt; &lt;li&gt;Zertifikate (SC)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TickData> StockTickAsync(string symbol, System.DateTime date, long limit, long skip, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (date == null)
                throw new System.ArgumentNullException("date");

            if (limit == null)
                throw new System.ArgumentNullException("limit");

            if (skip == null)
                throw new System.ArgumentNullException("skip");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/tick"
                    urlBuilder_.Append("stock/tick");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TickData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Historical NBBO
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.&lt;/p&gt;&lt;p&gt;For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard &lt;a target="_blank" href="/dashboard/download",&gt;here&lt;/a&gt;.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HistoricalNBBO> StockNbboAsync(string symbol, System.DateTime date, long limit, long skip)
        {
            return StockNbboAsync(symbol, date, limit, skip, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Historical NBBO
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.&lt;/p&gt;&lt;p&gt;For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard &lt;a target="_blank" href="/dashboard/download",&gt;here&lt;/a&gt;.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HistoricalNBBO> StockNbboAsync(string symbol, System.DateTime date, long limit, long skip, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (date == null)
                throw new System.ArgumentNullException("date");

            if (limit == null)
                throw new System.ArgumentNullException("limit");

            if (skip == null)
                throw new System.ArgumentNullException("skip");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/bbo"
                    urlBuilder_.Append("stock/bbo");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoricalNBBO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Last Bid-Ask
        /// </summary>
        /// <remarks>
        /// Get last bid/ask data for US stocks.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LastBidAsk> StockBidaskAsync(string symbol)
        {
            return StockBidaskAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Last Bid-Ask
        /// </summary>
        /// <remarks>
        /// Get last bid/ask data for US stocks.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LastBidAsk> StockBidaskAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/bidask"
                    urlBuilder_.Append("stock/bidask");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LastBidAsk>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Splits
        /// </summary>
        /// <remarks>
        /// Get splits data for stocks.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">YYYY-MM-DD.</param>
        /// <param name="to">YYYY-MM-DD.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Split>> StockSplitsAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return StockSplitsAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Splits
        /// </summary>
        /// <remarks>
        /// Get splits data for stocks.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">YYYY-MM-DD.</param>
        /// <param name="to">YYYY-MM-DD.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Split>> StockSplitsAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/split"
                    urlBuilder_.Append("stock/split");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Split>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Dividends 2 (Basic)
        /// </summary>
        /// <remarks>
        /// Get global dividends data.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Dividends2> StockBasicDividendsAsync(string symbol)
        {
            return StockBasicDividendsAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dividends 2 (Basic)
        /// </summary>
        /// <remarks>
        /// Get global dividends data.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Dividends2> StockBasicDividendsAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/dividend2"
                    urlBuilder_.Append("stock/dividend2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Dividends2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Indices Constituents
        /// </summary>
        /// <remarks>
        /// Get a list of index's constituents. A list of supported indices for this endpoint can be found &lt;a href="/api/v1/index/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IndicesConstituents> IndicesConstituentsAsync(string symbol)
        {
            return IndicesConstituentsAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Indices Constituents
        /// </summary>
        /// <remarks>
        /// Get a list of index's constituents. A list of supported indices for this endpoint can be found &lt;a href="/api/v1/index/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IndicesConstituents> IndicesConstituentsAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "index/constituents"
                    urlBuilder_.Append("index/constituents");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IndicesConstituents>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Indices Historical Constituents
        /// </summary>
        /// <remarks>
        /// Get full history of index's constituents including symbols and dates of joining and leaving the Index. Currently support &lt;code&gt;^GSPC&lt;/code&gt;, &lt;code&gt;^NDX&lt;/code&gt;, &lt;code&gt;^DJI&lt;/code&gt;
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IndicesHistoricalConstituents> IndicesHistoricalConstituentsAsync(string symbol)
        {
            return IndicesHistoricalConstituentsAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Indices Historical Constituents
        /// </summary>
        /// <remarks>
        /// Get full history of index's constituents including symbols and dates of joining and leaving the Index. Currently support &lt;code&gt;^GSPC&lt;/code&gt;, &lt;code&gt;^NDX&lt;/code&gt;, &lt;code&gt;^DJI&lt;/code&gt;
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IndicesHistoricalConstituents> IndicesHistoricalConstituentsAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "index/historical-constituents"
                    urlBuilder_.Append("index/historical-constituents");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IndicesHistoricalConstituents>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// ETFs Profile
        /// </summary>
        /// <remarks>
        /// Get ETF profile information. This endpoint has global coverage. A list of supported ETFs can be found &lt;a href="/api/v1/etf/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ETFsProfile> EtfsProfileAsync(string symbol, string isin)
        {
            return EtfsProfileAsync(symbol, isin, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ETFs Profile
        /// </summary>
        /// <remarks>
        /// Get ETF profile information. This endpoint has global coverage. A list of supported ETFs can be found &lt;a href="/api/v1/etf/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ETFsProfile> EtfsProfileAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "etf/profile"
                    urlBuilder_.Append("etf/profile");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ETFsProfile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// ETFs Holdings
        /// </summary>
        /// <remarks>
        /// Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings. A list of supported ETFs can be found &lt;a href="/api/v1/etf/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <param name="skip">Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.</param>
        /// <param name="date">Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ETFsHoldings> EtfsHoldingsAsync(string symbol, string isin, long? skip, string date)
        {
            return EtfsHoldingsAsync(symbol, isin, skip, date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ETFs Holdings
        /// </summary>
        /// <remarks>
        /// Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings. A list of supported ETFs can be found &lt;a href="/api/v1/etf/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <param name="skip">Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.</param>
        /// <param name="date">Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ETFsHoldings> EtfsHoldingsAsync(string symbol, string isin, long? skip, string date, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "etf/holdings"
                    urlBuilder_.Append("etf/holdings");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ETFsHoldings>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// ETFs Sector Exposure
        /// </summary>
        /// <remarks>
        /// Get ETF sector exposure data.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ETFsSectorExposure> EtfsSectorExposureAsync(string symbol, string isin)
        {
            return EtfsSectorExposureAsync(symbol, isin, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ETFs Sector Exposure
        /// </summary>
        /// <remarks>
        /// Get ETF sector exposure data.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ETFsSectorExposure> EtfsSectorExposureAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "etf/sector"
                    urlBuilder_.Append("etf/sector");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ETFsSectorExposure>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// ETFs Country Exposure
        /// </summary>
        /// <remarks>
        /// Get ETF country exposure data.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ETFsCountryExposure> EtfsCountryExposureAsync(string symbol, string isin)
        {
            return EtfsCountryExposureAsync(symbol, isin, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ETFs Country Exposure
        /// </summary>
        /// <remarks>
        /// Get ETF country exposure data.
        /// </remarks>
        /// <param name="symbol">ETF symbol.</param>
        /// <param name="isin">ETF isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ETFsCountryExposure> EtfsCountryExposureAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "etf/country"
                    urlBuilder_.Append("etf/country");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ETFsCountryExposure>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mutual Funds Profile
        /// </summary>
        /// <remarks>
        /// Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href="/api/v1/mutual-fund/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Fund's symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MutualFundProfile> MutualFundProfileAsync(string symbol, string isin)
        {
            return MutualFundProfileAsync(symbol, isin, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds Profile
        /// </summary>
        /// <remarks>
        /// Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href="/api/v1/mutual-fund/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Fund's symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MutualFundProfile> MutualFundProfileAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mutual-fund/profile"
                    urlBuilder_.Append("mutual-fund/profile");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MutualFundProfile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mutual Funds Holdings
        /// </summary>
        /// <remarks>
        /// Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href="/api/v1/mutual-fund/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Fund's symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <param name="skip">Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MutualFundHoldings> MutualFundHoldingsAsync(string symbol, string isin, long? skip)
        {
            return MutualFundHoldingsAsync(symbol, isin, skip, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds Holdings
        /// </summary>
        /// <remarks>
        /// Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href="/api/v1/mutual-fund/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">Fund's symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <param name="skip">Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MutualFundHoldings> MutualFundHoldingsAsync(string symbol, string isin, long? skip, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mutual-fund/holdings"
                    urlBuilder_.Append("mutual-fund/holdings");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MutualFundHoldings>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mutual Funds Sector Exposure
        /// </summary>
        /// <remarks>
        /// Get Mutual Funds sector exposure data.
        /// </remarks>
        /// <param name="symbol">Mutual Fund symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MutualFundSectorExposure> MutualFundSectorExposureAsync(string symbol, string isin)
        {
            return MutualFundSectorExposureAsync(symbol, isin, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds Sector Exposure
        /// </summary>
        /// <remarks>
        /// Get Mutual Funds sector exposure data.
        /// </remarks>
        /// <param name="symbol">Mutual Fund symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MutualFundSectorExposure> MutualFundSectorExposureAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mutual-fund/sector"
                    urlBuilder_.Append("mutual-fund/sector");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MutualFundSectorExposure>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mutual Funds Country Exposure
        /// </summary>
        /// <remarks>
        /// Get Mutual Funds country exposure data.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MutualFundCountryExposure> MutualFundCountryExposureAsync(string symbol, string isin)
        {
            return MutualFundCountryExposureAsync(symbol, isin, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds Country Exposure
        /// </summary>
        /// <remarks>
        /// Get Mutual Funds country exposure data.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="isin">Fund's isin.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MutualFundCountryExposure> MutualFundCountryExposureAsync(string symbol, string isin, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mutual-fund/country"
                    urlBuilder_.Append("mutual-fund/country");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MutualFundCountryExposure>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mutual Funds EET
        /// </summary>
        /// <remarks>
        /// Get EET data for EU funds. For PAIs data, please see the EET PAI endpoint.
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MutualFundEet> MutualFundEetAsync(string isin)
        {
            return MutualFundEetAsync(isin, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds EET
        /// </summary>
        /// <remarks>
        /// Get EET data for EU funds. For PAIs data, please see the EET PAI endpoint.
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MutualFundEet> MutualFundEetAsync(string isin, System.Threading.CancellationToken cancellationToken)
        {
            if (isin == null)
                throw new System.ArgumentNullException("isin");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mutual-fund/eet"
                    urlBuilder_.Append("mutual-fund/eet");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MutualFundEet>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mutual Funds EET PAI
        /// </summary>
        /// <remarks>
        /// Get EET PAI data for EU funds.
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MutualFundEetPai> MutualFundEetPaiAsync(string isin)
        {
            return MutualFundEetPaiAsync(isin, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mutual Funds EET PAI
        /// </summary>
        /// <remarks>
        /// Get EET PAI data for EU funds.
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MutualFundEetPai> MutualFundEetPaiAsync(string isin, System.Threading.CancellationToken cancellationToken)
        {
            if (isin == null)
                throw new System.ArgumentNullException("isin");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mutual-fund/eet-pai"
                    urlBuilder_.Append("mutual-fund/eet-pai");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MutualFundEetPai>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forex Exchanges
        /// </summary>
        /// <remarks>
        /// List supported forex exchanges
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ForexExchangesAsync()
        {
            return ForexExchangesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forex Exchanges
        /// </summary>
        /// <remarks>
        /// List supported forex exchanges
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ForexExchangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "forex/exchange"
                    urlBuilder_.Append("forex/exchange");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forex Symbol
        /// </summary>
        /// <remarks>
        /// List supported forex symbols.
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ForexSymbol>> ForexSymbolsAsync(string exchange)
        {
            return ForexSymbolsAsync(exchange, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forex Symbol
        /// </summary>
        /// <remarks>
        /// List supported forex symbols.
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ForexSymbol>> ForexSymbolsAsync(string exchange, System.Threading.CancellationToken cancellationToken)
        {
            if (exchange == null)
                throw new System.ArgumentNullException("exchange");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "forex/symbol"
                    urlBuilder_.Append("forex/symbol");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("exchange")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exchange, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ForexSymbol>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forex Candles
        /// </summary>
        /// <remarks>
        /// Get candlestick data for forex symbols.
        /// </remarks>
        /// <param name="symbol">Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ForexCandles> ForexCandlesAsync(string symbol, string resolution, long from, long to)
        {
            return ForexCandlesAsync(symbol, resolution, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forex Candles
        /// </summary>
        /// <remarks>
        /// Get candlestick data for forex symbols.
        /// </remarks>
        /// <param name="symbol">Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ForexCandles> ForexCandlesAsync(string symbol, string resolution, long from, long to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (resolution == null)
                throw new System.ArgumentNullException("resolution");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "forex/candle"
                    urlBuilder_.Append("forex/candle");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("resolution")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resolution, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ForexCandles>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forex rates
        /// </summary>
        /// <remarks>
        /// Get rates for all forex pairs. Ideal for currency conversion
        /// </remarks>
        /// <param name="base">Base currency. Default to EUR.</param>
        /// <param name="date">Date. Leave blank to get the latest data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Forexrates> ForexRatesAsync(string @base, string date)
        {
            return ForexRatesAsync(@base, date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forex rates
        /// </summary>
        /// <remarks>
        /// Get rates for all forex pairs. Ideal for currency conversion
        /// </remarks>
        /// <param name="base">Base currency. Default to EUR.</param>
        /// <param name="date">Date. Leave blank to get the latest data.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Forexrates> ForexRatesAsync(string @base, string date, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "forex/rates"
                    urlBuilder_.Append("forex/rates");
                    urlBuilder_.Append('?');
                    if (@base != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("base")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(@base, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Forexrates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Crypto Exchanges
        /// </summary>
        /// <remarks>
        /// List supported crypto exchanges
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CryptoExchangesAsync()
        {
            return CryptoExchangesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Exchanges
        /// </summary>
        /// <remarks>
        /// List supported crypto exchanges
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CryptoExchangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "crypto/exchange"
                    urlBuilder_.Append("crypto/exchange");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Crypto Symbol
        /// </summary>
        /// <remarks>
        /// List supported crypto symbols by exchange
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CryptoSymbol>> CryptoSymbolsAsync(string exchange)
        {
            return CryptoSymbolsAsync(exchange, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Symbol
        /// </summary>
        /// <remarks>
        /// List supported crypto symbols by exchange
        /// </remarks>
        /// <param name="exchange">Exchange you want to get the list of symbols from.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CryptoSymbol>> CryptoSymbolsAsync(string exchange, System.Threading.CancellationToken cancellationToken)
        {
            if (exchange == null)
                throw new System.ArgumentNullException("exchange");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "crypto/symbol"
                    urlBuilder_.Append("crypto/symbol");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("exchange")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exchange, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CryptoSymbol>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Crypto Profile
        /// </summary>
        /// <remarks>
        /// Get crypto's profile.
        /// </remarks>
        /// <param name="symbol">Crypto symbol such as BTC or ETH.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CryptoProfile> CryptoProfileAsync(string symbol)
        {
            return CryptoProfileAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Profile
        /// </summary>
        /// <remarks>
        /// Get crypto's profile.
        /// </remarks>
        /// <param name="symbol">Crypto symbol such as BTC or ETH.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CryptoProfile> CryptoProfileAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "crypto/profile"
                    urlBuilder_.Append("crypto/profile");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CryptoProfile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Crypto Candles
        /// </summary>
        /// <remarks>
        /// Get candlestick data for crypto symbols.
        /// </remarks>
        /// <param name="symbol">Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CryptoCandles> CryptoCandlesAsync(string symbol, string resolution, long from, long to)
        {
            return CryptoCandlesAsync(symbol, resolution, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Candles
        /// </summary>
        /// <remarks>
        /// Get candlestick data for crypto symbols.
        /// </remarks>
        /// <param name="symbol">Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CryptoCandles> CryptoCandlesAsync(string symbol, string resolution, long from, long to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (resolution == null)
                throw new System.ArgumentNullException("resolution");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "crypto/candle"
                    urlBuilder_.Append("crypto/candle");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("resolution")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resolution, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CryptoCandles>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Pattern Recognition
        /// </summary>
        /// <remarks>
        /// Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PatternRecognition> PatternRecognitionAsync(string symbol, string resolution)
        {
            return PatternRecognitionAsync(symbol, resolution, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Pattern Recognition
        /// </summary>
        /// <remarks>
        /// Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PatternRecognition> PatternRecognitionAsync(string symbol, string resolution, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (resolution == null)
                throw new System.ArgumentNullException("resolution");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "scan/pattern"
                    urlBuilder_.Append("scan/pattern");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("resolution")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resolution, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PatternRecognition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Support/Resistance
        /// </summary>
        /// <remarks>
        /// Get support and resistance levels for a symbol.
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SupportResistance> SupportResistanceAsync(string symbol, string resolution)
        {
            return SupportResistanceAsync(symbol, resolution, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Support/Resistance
        /// </summary>
        /// <remarks>
        /// Get support and resistance levels for a symbol.
        /// </remarks>
        /// <param name="symbol">Symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SupportResistance> SupportResistanceAsync(string symbol, string resolution, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (resolution == null)
                throw new System.ArgumentNullException("resolution");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "scan/support-resistance"
                    urlBuilder_.Append("scan/support-resistance");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("resolution")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resolution, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SupportResistance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Aggregate Indicators
        /// </summary>
        /// <remarks>
        /// Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v. A full list of indicators can be found &lt;a href="https://docs.google.com/spreadsheets/d/1MWuy0WuT2yVlxr1KbPdggVygMZtJfunDnhe-C0GEXYM/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AggregateIndicators> AggregateIndicatorAsync(string symbol, string resolution)
        {
            return AggregateIndicatorAsync(symbol, resolution, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Aggregate Indicators
        /// </summary>
        /// <remarks>
        /// Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v. A full list of indicators can be found &lt;a href="https://docs.google.com/spreadsheets/d/1MWuy0WuT2yVlxr1KbPdggVygMZtJfunDnhe-C0GEXYM/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AggregateIndicators> AggregateIndicatorAsync(string symbol, string resolution, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (resolution == null)
                throw new System.ArgumentNullException("resolution");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "scan/technical-indicator"
                    urlBuilder_.Append("scan/technical-indicator");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("resolution")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resolution, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AggregateIndicators>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Technical Indicators
        /// </summary>
        /// <remarks>
        /// Return technical indicator with price data. List of supported indicators can be found &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <param name="indicator">Indicator name. Full list can be found &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <param name="indicator_fields">Check out &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;this page&lt;/a&gt; to see which indicators and params are supported.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TechnicalIndicator> TechnicalIndicatorAsync(string symbol, string resolution, long from, long to, string indicator, IndicatorFields indicator_fields)
        {
            return TechnicalIndicatorAsync(symbol, resolution, from, to, indicator, indicator_fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Technical Indicators
        /// </summary>
        /// <remarks>
        /// Return technical indicator with price data. List of supported indicators can be found &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="symbol">symbol</param>
        /// <param name="resolution">Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <param name="indicator">Indicator name. Full list can be found &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;here&lt;/a&gt;.</param>
        /// <param name="indicator_fields">Check out &lt;a href="https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing" target="_blank"&gt;this page&lt;/a&gt; to see which indicators and params are supported.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TechnicalIndicator> TechnicalIndicatorAsync(string symbol, string resolution, long from, long to, string indicator, IndicatorFields indicator_fields, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (resolution == null)
                throw new System.ArgumentNullException("resolution");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            if (indicator == null)
                throw new System.ArgumentNullException("indicator");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(indicator_fields, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "indicator"
                    urlBuilder_.Append("indicator");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("resolution")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resolution, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("indicator")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(indicator, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TechnicalIndicator>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Earnings Call Transcripts List
        /// </summary>
        /// <remarks>
        /// List earnings call transcripts' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
        /// </remarks>
        /// <param name="symbol">Company symbol: AAPL. Leave empty to list the latest transcripts</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EarningsCallTranscriptsList> TranscriptsListAsync(string symbol)
        {
            return TranscriptsListAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Call Transcripts List
        /// </summary>
        /// <remarks>
        /// List earnings call transcripts' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
        /// </remarks>
        /// <param name="symbol">Company symbol: AAPL. Leave empty to list the latest transcripts</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EarningsCallTranscriptsList> TranscriptsListAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/transcripts/list"
                    urlBuilder_.Append("stock/transcripts/list");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EarningsCallTranscriptsList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Earnings Call Transcripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get earnings call transcripts, audio and participants' list. Data is available for US, UK, European, Australian and Canadian companies.&lt;p&gt;15+ years of data is available with 220,000+ audio which add up to 7TB in size.&lt;/p&gt;
        /// </remarks>
        /// <param name="id">Transcript's id obtained with &lt;a href="#transcripts-list"&gt;Transcripts List endpoint&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EarningsCallTranscripts> TranscriptsAsync(string id)
        {
            return TranscriptsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Call Transcripts
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get earnings call transcripts, audio and participants' list. Data is available for US, UK, European, Australian and Canadian companies.&lt;p&gt;15+ years of data is available with 220,000+ audio which add up to 7TB in size.&lt;/p&gt;
        /// </remarks>
        /// <param name="id">Transcript's id obtained with &lt;a href="#transcripts-list"&gt;Transcripts List endpoint&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EarningsCallTranscripts> TranscriptsAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/transcripts"
                    urlBuilder_.Append("stock/transcripts");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EarningsCallTranscripts>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Earnings Call Audio Live
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Stream live earnings calls with data provided in the calendar. The data will be available in m3u8 format. mp3 files will be available once the calls finish in the &lt;code&gt;recording&lt;/code&gt; field.&lt;/p&gt;
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="symbol">Filter by symbol: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EarningsCallLive> EarningsCallLiveAsync(System.DateTime? from, System.DateTime? to, string symbol)
        {
            return EarningsCallLiveAsync(from, to, symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings Call Audio Live
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Stream live earnings calls with data provided in the calendar. The data will be available in m3u8 format. mp3 files will be available once the calls finish in the &lt;code&gt;recording&lt;/code&gt; field.&lt;/p&gt;
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="symbol">Filter by symbol: AAPL.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EarningsCallLive> EarningsCallLiveAsync(System.DateTime? from, System.DateTime? to, string symbol, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/earnings-call-live"
                    urlBuilder_.Append("stock/earnings-call-live");
                    urlBuilder_.Append('?');
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EarningsCallLive>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company Presentation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get presentations/slides data in PDF format that are usually used during earnings calls.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StockPresentation> StockPresentationAsync(string symbol)
        {
            return StockPresentationAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Presentation
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get presentations/slides data in PDF format that are usually used during earnings calls.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StockPresentation> StockPresentationAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/presentation"
                    urlBuilder_.Append("stock/presentation");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StockPresentation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Social Sentiment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get social sentiment for stocks on Reddit and Twitter.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SocialSentiment> SocialSentimentAsync(string symbol, System.DateTime? from, System.DateTime? to)
        {
            return SocialSentimentAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Social Sentiment
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get social sentiment for stocks on Reddit and Twitter.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Company symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SocialSentiment> SocialSentimentAsync(string symbol, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/social-sentiment"
                    urlBuilder_.Append("stock/social-sentiment");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SocialSentiment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Investment Themes (Thematic Investing)
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.&lt;/p&gt;&lt;p&gt;This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.&lt;/p&gt;&lt;p&gt;A full list of themes supported can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing"&gt;here&lt;/a&gt;. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.&lt;/p&gt;
        /// </remarks>
        /// <param name="theme">Investment theme. A full list of themes supported can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InvestmentThemes> InvestmentThemesAsync(string theme)
        {
            return InvestmentThemesAsync(theme, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Investment Themes (Thematic Investing)
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.&lt;/p&gt;&lt;p&gt;This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.&lt;/p&gt;&lt;p&gt;A full list of themes supported can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing"&gt;here&lt;/a&gt;. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.&lt;/p&gt;
        /// </remarks>
        /// <param name="theme">Investment theme. A full list of themes supported can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InvestmentThemes> InvestmentThemesAsync(string theme, System.Threading.CancellationToken cancellationToken)
        {
            if (theme == null)
                throw new System.ArgumentNullException("theme");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/investment-theme"
                    urlBuilder_.Append("stock/investment-theme");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("theme")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(theme, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InvestmentThemes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Supply Chain Relationships
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides an overall map of public companies' key customers and suppliers. The data offers a deeper look into a company's supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SupplyChainRelationships> SupplyChainRelationshipsAsync(string symbol)
        {
            return SupplyChainRelationshipsAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supply Chain Relationships
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides an overall map of public companies' key customers and suppliers. The data offers a deeper look into a company's supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SupplyChainRelationships> SupplyChainRelationshipsAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/supply-chain"
                    urlBuilder_.Append("stock/supply-chain");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SupplyChainRelationships>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company ESG Scores
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides the latest ESG scores and important indicators for 7000+ global companies. The data is collected through company's public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyESG> CompanyEsgScoreAsync(string symbol)
        {
            return CompanyEsgScoreAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company ESG Scores
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides the latest ESG scores and important indicators for 7000+ global companies. The data is collected through company's public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyESG> CompanyEsgScoreAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/esg"
                    urlBuilder_.Append("stock/esg");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyESG>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Historical ESG Scores
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides historical ESG scores and important indicators for 7000+ global companies. The data is collected through company's public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HistoricalCompanyESG> CompanyHistoricalEsgScoreAsync(string symbol)
        {
            return CompanyHistoricalEsgScoreAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Historical ESG Scores
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides historical ESG scores and important indicators for 7000+ global companies. The data is collected through company's public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HistoricalCompanyESG> CompanyHistoricalEsgScoreAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/historical-esg"
                    urlBuilder_.Append("stock/historical-esg");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoricalCompanyESG>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company Earnings Quality Score
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides Earnings Quality Score for global companies.&lt;/p&gt;&lt;p&gt; Earnings quality refers to the extent to which current earnings predict future earnings. "High-quality" earnings are expected to persist, while "low-quality" earnings do not. A higher score means a higher earnings quality&lt;/p&gt;&lt;p&gt;Finnhub uses a proprietary model which takes into consideration 4 criteria:&lt;/p&gt; &lt;ul style="list-style-type: unset; margin-left: 30px;"&gt;&lt;li&gt;Profitability&lt;/li&gt;&lt;li&gt;Growth&lt;/li&gt;&lt;li&gt;Cash Generation &amp; Capital Allocation&lt;/li&gt;&lt;li&gt;Leverage&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="freq">Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyEarningsQualityScore> CompanyEarningsQualityScoreAsync(string symbol, string freq)
        {
            return CompanyEarningsQualityScoreAsync(symbol, freq, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Earnings Quality Score
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;This endpoint provides Earnings Quality Score for global companies.&lt;/p&gt;&lt;p&gt; Earnings quality refers to the extent to which current earnings predict future earnings. "High-quality" earnings are expected to persist, while "low-quality" earnings do not. A higher score means a higher earnings quality&lt;/p&gt;&lt;p&gt;Finnhub uses a proprietary model which takes into consideration 4 criteria:&lt;/p&gt; &lt;ul style="list-style-type: unset; margin-left: 30px;"&gt;&lt;li&gt;Profitability&lt;/li&gt;&lt;li&gt;Growth&lt;/li&gt;&lt;li&gt;Cash Generation &amp; Capital Allocation&lt;/li&gt;&lt;li&gt;Leverage&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="freq">Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyEarningsQualityScore> CompanyEarningsQualityScoreAsync(string symbol, string freq, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (freq == null)
                throw new System.ArgumentNullException("freq");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/earnings-quality-score"
                    urlBuilder_.Append("stock/earnings-quality-score");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("freq")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(freq, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyEarningsQualityScore>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// COVID-19
        /// </summary>
        /// <remarks>
        /// Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API &lt;a href="https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19" target="_blank" rel="nofollow"&gt;here&lt;/a&gt;
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CovidInfo>> Covid19Async()
        {
            return Covid19Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// COVID-19
        /// </summary>
        /// <remarks>
        /// Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API &lt;a href="https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19" target="_blank" rel="nofollow"&gt;here&lt;/a&gt;
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CovidInfo>> Covid19Async(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "covid19/us"
                    urlBuilder_.Append("covid19/us");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CovidInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// FDA Committee Meeting Calendar
        /// </summary>
        /// <remarks>
        /// FDA's advisory committees are established to provide functions which support the agency's mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FDAComitteeMeeting>> FdaCommitteeMeetingCalendarAsync()
        {
            return FdaCommitteeMeetingCalendarAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// FDA Committee Meeting Calendar
        /// </summary>
        /// <remarks>
        /// FDA's advisory committees are established to provide functions which support the agency's mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FDAComitteeMeeting>> FdaCommitteeMeetingCalendarAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "fda-advisory-committee-calendar"
                    urlBuilder_.Append("fda-advisory-committee-calendar");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FDAComitteeMeeting>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// USPTO Patents
        /// </summary>
        /// <remarks>
        /// List USPTO patents for companies. Limit to 250 records per API call.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UsptoPatentResult> StockUsptoPatentAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return StockUsptoPatentAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// USPTO Patents
        /// </summary>
        /// <remarks>
        /// List USPTO patents for companies. Limit to 250 records per API call.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UsptoPatentResult> StockUsptoPatentAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/uspto-patent"
                    urlBuilder_.Append("stock/uspto-patent");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UsptoPatentResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// H1-B Visa Application
        /// </summary>
        /// <remarks>
        /// Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VisaApplicationResult> StockVisaApplicationAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return StockVisaApplicationAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// H1-B Visa Application
        /// </summary>
        /// <remarks>
        /// Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VisaApplicationResult> StockVisaApplicationAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/visa-application"
                    urlBuilder_.Append("stock/visa-application");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VisaApplicationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Senate Lobbying
        /// </summary>
        /// <remarks>
        /// Get a list of reported lobbying activities in the Senate and the House.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LobbyingResult> StockLobbyingAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return StockLobbyingAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Senate Lobbying
        /// </summary>
        /// <remarks>
        /// Get a list of reported lobbying activities in the Senate and the House.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LobbyingResult> StockLobbyingAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/lobbying"
                    urlBuilder_.Append("stock/lobbying");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LobbyingResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// USA Spending
        /// </summary>
        /// <remarks>
        /// Get a list of government's spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UsaSpendingResult> StockUsaSpendingAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return StockUsaSpendingAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// USA Spending
        /// </summary>
        /// <remarks>
        /// Get a list of government's spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UsaSpendingResult> StockUsaSpendingAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/usa-spending"
                    urlBuilder_.Append("stock/usa-spending");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UsaSpendingResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Congressional Trading
        /// </summary>
        /// <remarks>
        /// Get stock trades data disclosed by members of congress.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CongressionalTrading> CongressionalTradingAsync(string symbol, System.DateTime from, System.DateTime to)
        {
            return CongressionalTradingAsync(symbol, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Congressional Trading
        /// </summary>
        /// <remarks>
        /// Get stock trades data disclosed by members of congress.
        /// </remarks>
        /// <param name="symbol">Symbol of the company: AAPL.</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CongressionalTrading> CongressionalTradingAsync(string symbol, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/congressional-trading"
                    urlBuilder_.Append("stock/congressional-trading");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CongressionalTrading>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bond Profile
        /// </summary>
        /// <remarks>
        /// Get general information of a bond. You can query by FIGI, ISIN or CUSIP. A list of supported bonds can be found &lt;a href="/api/v1/bond/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <param name="figi">FIGI</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BondProfile> BondProfileAsync(string isin, string cusip, string figi)
        {
            return BondProfileAsync(isin, cusip, figi, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bond Profile
        /// </summary>
        /// <remarks>
        /// Get general information of a bond. You can query by FIGI, ISIN or CUSIP. A list of supported bonds can be found &lt;a href="/api/v1/bond/list?token=" target="_blank"&gt;here&lt;/a&gt;.
        /// </remarks>
        /// <param name="isin">ISIN</param>
        /// <param name="cusip">CUSIP</param>
        /// <param name="figi">FIGI</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BondProfile> BondProfileAsync(string isin, string cusip, string figi, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "bond/profile"
                    urlBuilder_.Append("bond/profile");
                    urlBuilder_.Append('?');
                    if (isin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cusip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cusip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cusip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (figi != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("figi")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(figi, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BondProfile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bond price data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get bond's price data. The following datasets are supported:&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>  &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;US Government Bonds&lt;/th&gt;
        /// <br/>      &lt;td&gt;Government Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;144A Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BondCandles> BondPriceAsync(string isin, long from, long to)
        {
            return BondPriceAsync(isin, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bond price data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get bond's price data. The following datasets are supported:&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>  &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;US Government Bonds&lt;/th&gt;
        /// <br/>      &lt;td&gt;Government Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;End-of-day&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;144A Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <param name="from">UNIX timestamp. Interval initial value.</param>
        /// <param name="to">UNIX timestamp. Interval end value.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BondCandles> BondPriceAsync(string isin, long from, long to, System.Threading.CancellationToken cancellationToken)
        {
            if (isin == null)
                throw new System.ArgumentNullException("isin");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "bond/price"
                    urlBuilder_.Append("bond/price");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BondCandles>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bond Tick Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get trade-level data for bonds. The following datasets are supported:&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;144A Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <param name="exchange">Currently support the following values: &lt;code&gt;trace&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BondTickData> BondTickAsync(string isin, System.DateTime date, long limit, long skip, string exchange)
        {
            return BondTickAsync(isin, date, limit, skip, exchange, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bond Tick Data
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get trade-level data for bonds. The following datasets are supported:&lt;/p&gt;&lt;table class="table table-hover"&gt;
        /// <br/>  &lt;thead&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;th&gt;Exchange&lt;/th&gt;
        /// <br/>      &lt;th&gt;Segment&lt;/th&gt;
        /// <br/>      &lt;th&gt;Delay&lt;/th&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/thead&gt;
        /// <br/>  &lt;tbody&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>    &lt;tr&gt;
        /// <br/>      &lt;td class="text-blue"&gt;FINRA Trace&lt;/th&gt;
        /// <br/>      &lt;td&gt;144A Bonds&lt;/td&gt;
        /// <br/>      &lt;td&gt;Delayed 4h&lt;/td&gt;
        /// <br/>    &lt;/tr&gt;
        /// <br/>  &lt;/tbody&gt;
        /// <br/>&lt;/table&gt;
        /// </remarks>
        /// <param name="isin">ISIN.</param>
        /// <param name="date">Date: 2020-04-02.</param>
        /// <param name="limit">Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;</param>
        /// <param name="skip">Number of ticks to skip. Use this parameter to loop through the entire data.</param>
        /// <param name="exchange">Currently support the following values: &lt;code&gt;trace&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BondTickData> BondTickAsync(string isin, System.DateTime date, long limit, long skip, string exchange, System.Threading.CancellationToken cancellationToken)
        {
            if (isin == null)
                throw new System.ArgumentNullException("isin");

            if (date == null)
                throw new System.ArgumentNullException("date");

            if (limit == null)
                throw new System.ArgumentNullException("limit");

            if (skip == null)
                throw new System.ArgumentNullException("skip");

            if (exchange == null)
                throw new System.ArgumentNullException("exchange");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "bond/tick"
                    urlBuilder_.Append("bond/tick");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("isin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("exchange")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exchange, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BondTickData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bond Yield Curve
        /// </summary>
        /// <remarks>
        /// Get yield curve data for Treasury bonds.
        /// </remarks>
        /// <param name="code">Bond's code. You can find the list of supported code &lt;a href="https://docs.google.com/spreadsheets/d/1iA-lM0Kht7lsQZ7Uu_s6r2i1BbQNUNO9eGkO5-zglHg/edit?usp=sharing" target="_blank" rel="noopener"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BondYieldCurve> BondYieldCurveAsync(string code)
        {
            return BondYieldCurveAsync(code, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bond Yield Curve
        /// </summary>
        /// <remarks>
        /// Get yield curve data for Treasury bonds.
        /// </remarks>
        /// <param name="code">Bond's code. You can find the list of supported code &lt;a href="https://docs.google.com/spreadsheets/d/1iA-lM0Kht7lsQZ7Uu_s6r2i1BbQNUNO9eGkO5-zglHg/edit?usp=sharing" target="_blank" rel="noopener"&gt;here&lt;/a&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BondYieldCurve> BondYieldCurveAsync(string code, System.Threading.CancellationToken cancellationToken)
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "bond/yield-curve"
                    urlBuilder_.Append("bond/yield-curve");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BondYieldCurve>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Airline Price Index
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The Flight Ticket Price Index API provides comprehensive data on airline ticket prices, including the average daily ticket price and its percentage change (price index). This data, collected weekly and projected two weeks ahead, aggregates daily prices and indexes from the 50 busiest and largest airports across the USA. The dataset includes detailed information on airlines, dates, and average ticket prices, offering valuable insights for market analysis and pricing strategies.&lt;/p&gt;&lt;p&gt;The price index is calculated as percentage change of average daily ticket price from the previous weekly reading. Raw ticket prices data is available for Enterprise users. &lt;a href="mailto:support@finnhub.io"&gt;Contact us&lt;/a&gt; to inquire about the raw price data.&lt;/p&gt;
        /// </remarks>
        /// <param name="airline">Filter data by airline. Accepted values: &lt;code&gt;united&lt;/code&gt;,&lt;code&gt;delta&lt;/code&gt;,&lt;code&gt;american_airlines&lt;/code&gt;,&lt;code&gt;southwest&lt;/code&gt;,&lt;code&gt;southern_airways_express&lt;/code&gt;,&lt;code&gt;alaska_airlines&lt;/code&gt;,&lt;code&gt;frontier_airlines&lt;/code&gt;,&lt;code&gt;jetblue_airways&lt;/code&gt;,&lt;code&gt;spirit_airlines&lt;/code&gt;,&lt;code&gt;sun_country_airlines&lt;/code&gt;,&lt;code&gt;breeze_airways&lt;/code&gt;,&lt;code&gt;hawaiian_airlines&lt;/code&gt;</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AirlinePriceIndexData> AirlinePriceIndexAsync(string airline, System.DateTime from, System.DateTime to)
        {
            return AirlinePriceIndexAsync(airline, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Airline Price Index
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The Flight Ticket Price Index API provides comprehensive data on airline ticket prices, including the average daily ticket price and its percentage change (price index). This data, collected weekly and projected two weeks ahead, aggregates daily prices and indexes from the 50 busiest and largest airports across the USA. The dataset includes detailed information on airlines, dates, and average ticket prices, offering valuable insights for market analysis and pricing strategies.&lt;/p&gt;&lt;p&gt;The price index is calculated as percentage change of average daily ticket price from the previous weekly reading. Raw ticket prices data is available for Enterprise users. &lt;a href="mailto:support@finnhub.io"&gt;Contact us&lt;/a&gt; to inquire about the raw price data.&lt;/p&gt;
        /// </remarks>
        /// <param name="airline">Filter data by airline. Accepted values: &lt;code&gt;united&lt;/code&gt;,&lt;code&gt;delta&lt;/code&gt;,&lt;code&gt;american_airlines&lt;/code&gt;,&lt;code&gt;southwest&lt;/code&gt;,&lt;code&gt;southern_airways_express&lt;/code&gt;,&lt;code&gt;alaska_airlines&lt;/code&gt;,&lt;code&gt;frontier_airlines&lt;/code&gt;,&lt;code&gt;jetblue_airways&lt;/code&gt;,&lt;code&gt;spirit_airlines&lt;/code&gt;,&lt;code&gt;sun_country_airlines&lt;/code&gt;,&lt;code&gt;breeze_airways&lt;/code&gt;,&lt;code&gt;hawaiian_airlines&lt;/code&gt;</param>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AirlinePriceIndexData> AirlinePriceIndexAsync(string airline, System.DateTime from, System.DateTime to, System.Threading.CancellationToken cancellationToken)
        {
            if (airline == null)
                throw new System.ArgumentNullException("airline");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "airline/price-index"
                    urlBuilder_.Append("airline/price-index");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("airline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(airline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AirlinePriceIndexData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Country Metadata
        /// </summary>
        /// <remarks>
        /// List all countries and metadata.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CountryMetadata>> CountryAsync()
        {
            return CountryAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Country Metadata
        /// </summary>
        /// <remarks>
        /// List all countries and metadata.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CountryMetadata>> CountryAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "country"
                    urlBuilder_.Append("country");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CountryMetadata>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Economic Calendar
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get recent and upcoming economic releases.&lt;/p&gt;&lt;p&gt;Historical events and surprises are available for Enterprise clients.&lt;/p&gt;
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EconomicCalendar> EconomicCalendarAsync(System.DateTime? from, System.DateTime? to)
        {
            return EconomicCalendarAsync(from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Economic Calendar
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get recent and upcoming economic releases.&lt;/p&gt;&lt;p&gt;Historical events and surprises are available for Enterprise clients.&lt;/p&gt;
        /// </remarks>
        /// <param name="from">From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <param name="to">To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EconomicCalendar> EconomicCalendarAsync(System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "calendar/economic"
                    urlBuilder_.Append("calendar/economic");
                    urlBuilder_.Append('?');
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EconomicCalendar>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Economic Code
        /// </summary>
        /// <remarks>
        /// List codes of supported economic data.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicCode>> EconomicCodeAsync()
        {
            return EconomicCodeAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Economic Code
        /// </summary>
        /// <remarks>
        /// List codes of supported economic data.
        /// </remarks>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EconomicCode>> EconomicCodeAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "economic/code"
                    urlBuilder_.Append("economic/code");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EconomicCode>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Economic Data
        /// </summary>
        /// <remarks>
        /// Get economic data.
        /// </remarks>
        /// <param name="code">Economic code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EconomicData> EconomicDataAsync(string code)
        {
            return EconomicDataAsync(code, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Economic Data
        /// </summary>
        /// <remarks>
        /// Get economic data.
        /// </remarks>
        /// <param name="code">Economic code.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EconomicData> EconomicDataAsync(string code, System.Threading.CancellationToken cancellationToken)
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "economic"
                    urlBuilder_.Append("economic");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EconomicData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// International Filings
        /// </summary>
        /// <remarks>
        /// List filings for international companies. Limit to 500 documents at a time. These are the documents we use to source our fundamental data. Enterprise clients who need access to the full filings for global markets should contact us for the access.
        /// </remarks>
        /// <param name="symbol">Symbol. Leave empty to list latest filings.</param>
        /// <param name="country">Filter by country using country's 2-letter code.</param>
        /// <param name="from">From date: 2023-01-15.</param>
        /// <param name="to">To date: 2023-12-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InternationalFiling>> InternationalFilingsAsync(string symbol, string country, System.DateTime? from, System.DateTime? to)
        {
            return InternationalFilingsAsync(symbol, country, from, to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// International Filings
        /// </summary>
        /// <remarks>
        /// List filings for international companies. Limit to 500 documents at a time. These are the documents we use to source our fundamental data. Enterprise clients who need access to the full filings for global markets should contact us for the access.
        /// </remarks>
        /// <param name="symbol">Symbol. Leave empty to list latest filings.</param>
        /// <param name="country">Filter by country using country's 2-letter code.</param>
        /// <param name="from">From date: 2023-01-15.</param>
        /// <param name="to">To date: 2023-12-16.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InternationalFiling>> InternationalFilingsAsync(string symbol, string country, System.DateTime? from, System.DateTime? to, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/international-filings"
                    urlBuilder_.Append("stock/international-filings");
                    urlBuilder_.Append('?');
                    if (symbol != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (country != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("country")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InternationalFiling>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revenue Breakdown &amp; KPI
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get standardized revenue breakdown and KPIs data for 30,000+ global companies.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RevenueBreakdown2> RevenueBreakdown2Async(string symbol)
        {
            return RevenueBreakdown2Async(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revenue Breakdown &amp; KPI
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get standardized revenue breakdown and KPIs data for 30,000+ global companies.&lt;/p&gt;
        /// </remarks>
        /// <param name="symbol">Symbol.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RevenueBreakdown2> RevenueBreakdown2Async(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stock/revenue-breakdown2"
                    urlBuilder_.Append("stock/revenue-breakdown2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("symbol")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevenueBreakdown2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// AI Copilot
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Chat with our AI copilot powered by Neyman AI trained on the extensive Finnhub's global data. You can ask it any finance-related questions just like with other LLM models and receive results in texts and widgets.&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AIChatResponse> AiChatAsync(AIChatBody search)
        {
            return AiChatAsync(search, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// AI Copilot
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Chat with our AI copilot powered by Neyman AI trained on the extensive Finnhub's global data. You can ask it any finance-related questions just like with other LLM models and receive results in texts and widgets.&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AIChatResponse> AiChatAsync(AIChatBody search, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(search, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "ai-chat"
                    urlBuilder_.Append("ai-chat");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AIChatResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Global Filings Search
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for best-matched filings across global companies' filings, transcripts and press releases. You can filter by anything from symbol, ISIN to form type, and document sources.&lt;/p&gt;&lt;p&gt;This endpoint will return a list of documents that match your search criteria. If you would like to get the excerpts as well, please set &lt;code&gt;highlighted&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Once you have the list of documents, you can get a list of excerpts and positions to highlight the document using the &lt;code&gt;/search-in-filing&lt;/code&gt; endpoint&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SearchResponse> GlobalFilingsSearchAsync(SearchBody search)
        {
            return GlobalFilingsSearchAsync(search, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Global Filings Search
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Search for best-matched filings across global companies' filings, transcripts and press releases. You can filter by anything from symbol, ISIN to form type, and document sources.&lt;/p&gt;&lt;p&gt;This endpoint will return a list of documents that match your search criteria. If you would like to get the excerpts as well, please set &lt;code&gt;highlighted&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Once you have the list of documents, you can get a list of excerpts and positions to highlight the document using the &lt;code&gt;/search-in-filing&lt;/code&gt; endpoint&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchResponse> GlobalFilingsSearchAsync(SearchBody search, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(search, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "global-filings/search"
                    urlBuilder_.Append("global-filings/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search In Filing
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a list of excerpts and highlight positions within a document using your query.&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InFilingResponse> SearchInFilingAsync(InFilingSearchBody search)
        {
            return SearchInFilingAsync(search, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search In Filing
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get a list of excerpts and highlight positions within a document using your query.&lt;/p&gt;
        /// </remarks>
        /// <param name="search">Search body</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InFilingResponse> SearchInFilingAsync(InFilingSearchBody search, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(search, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "global-filings/search-in-filing"
                    urlBuilder_.Append("global-filings/search-in-filing");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InFilingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search Filter
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get available values for each filter in search body.&lt;/p&gt;
        /// </remarks>
        /// <param name="field">Field to get available filters. Available filters are "countries", "exchanges", "exhibits", "forms", "gics", "naics", "caps", "acts", and "sort".</param>
        /// <param name="source">Get available forms for each source.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SearchFilter> GlobalFilingsSearchFilterAsync(string field, string source)
        {
            return GlobalFilingsSearchFilterAsync(field, source, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search Filter
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Get available values for each filter in search body.&lt;/p&gt;
        /// </remarks>
        /// <param name="field">Field to get available filters. Available filters are "countries", "exchanges", "exhibits", "forms", "gics", "naics", "caps", "acts", and "sort".</param>
        /// <param name="source">Get available forms for each source.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchFilter> GlobalFilingsSearchFilterAsync(string field, string source, System.Threading.CancellationToken cancellationToken)
        {
            if (field == null)
                throw new System.ArgumentNullException("field");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "global-filings/filter"
                    urlBuilder_.Append("global-filings/filter");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("field")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(field, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (source != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("source")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(source, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchFilter>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FinnhubAPIClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Download Filings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Download filings using document ids.&lt;/p&gt;
        /// </remarks>
        /// <param name="documentId">Document's id. Note that this is different from filingId as 1 filing can contain multiple documents.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GlobalFilingsDownloadAsync(string documentId)
        {
            return GlobalFilingsDownloadAsync(documentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download Filings
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Download filings using document ids.&lt;/p&gt;
        /// </remarks>
        /// <param name="documentId">Document's id. Note that this is different from filingId as 1 filing can contain multiple documents.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FinnhubAPIClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GlobalFilingsDownloadAsync(string documentId, System.Threading.CancellationToken cancellationToken)
        {
            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "global-filings/download"
                    urlBuilder_.Append("global-filings/download");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("documentId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FinnhubAPIClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new FinnhubAPIClientException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new FinnhubAPIClientException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBody
    {
        /// <summary>
        /// Search query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }

        /// <summary>
        /// List of isin to search, comma separated (Max: 50).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isins { get; set; }

        /// <summary>
        /// List of cusip to search, comma separated (Max: 50).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusips { get; set; }

        /// <summary>
        /// List of SEC Center Index Key to search, comma separated (Max: 50).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ciks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ciks { get; set; }

        /// <summary>
        /// List of SEDAR issuer number to search, comma separated (Max: 50).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sedarIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SedarIds { get; set; }

        /// <summary>
        /// List of Companies House number to search, comma separated (Max: 50).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChIds { get; set; }

        /// <summary>
        /// List of symbols to search, comma separated (Max: 50).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbols { get; set; }

        /// <summary>
        /// List of sedols to search, comma separated (Max: 50).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sedols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sedols { get; set; }

        /// <summary>
        /// List of sources to search, comma separated (Max: 50). Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sources { get; set; }

        /// <summary>
        /// List of forms to search, comma separated (Max: 50). Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forms { get; set; }

        /// <summary>
        /// List of gics to search, comma separated (Max: 50). Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gics { get; set; }

        /// <summary>
        /// List of sources to search, comma separated (Max: 50). Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("naics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naics { get; set; }

        /// <summary>
        /// List of exhibits to search, comma separated (Max: 50). Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exhibits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exhibits { get; set; }

        /// <summary>
        /// List of exchanges to search, comma separated (Max: 50). Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exchanges { get; set; }

        /// <summary>
        /// List of sources to search, comma separated (Max: 50). Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Countries { get; set; }

        /// <summary>
        /// List of SEC's exchanges act to search, comma separated. Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Acts { get; set; }

        /// <summary>
        /// List of market capitalization to search, comma separated. Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Caps { get; set; }

        /// <summary>
        /// Search from date in format: YYYY-MM-DD, default from the last 2 years
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromDate { get; set; }

        /// <summary>
        /// Search to date in format: YYYY-MM-DD, default to today
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToDate { get; set; }

        /// <summary>
        /// Use for pagination, default to page 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page { get; set; }

        /// <summary>
        /// Sort result by, default: sortMostRecent. Look at &lt;code&gt;/filter&lt;/code&gt; endpoint to see all available values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        /// <summary>
        /// Enable highlight in returned filings. If enabled, only return 10 results each time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highlighted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Highlighted { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AIChatBody
    {
        /// <summary>
        /// Messages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AIChatMessage> Messages { get; set; } = new System.Collections.ObjectModel.Collection<AIChatMessage>();

        /// <summary>
        /// Stream responses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stream", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Stream { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AIChatMessage
    {
        /// <summary>
        /// Role system/user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        /// <summary>
        /// Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AIChatResponse
    {
        /// <summary>
        /// Chat ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChatId { get; set; }

        /// <summary>
        /// Response text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Query summary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("querySummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuerySummary { get; set; }

        /// <summary>
        /// Related queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relatedQueries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> RelatedQueries { get; set; }

        /// <summary>
        /// List of tickers mentioned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tickers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Tickers { get; set; }

        /// <summary>
        /// Sources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Sources { get; set; }

        /// <summary>
        /// Widgets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("widgets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Widgets { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InFilingSearchBody
    {
        /// <summary>
        /// Search query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }

        /// <summary>
        /// Filing Id to search
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FilingId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResponse
    {
        /// <summary>
        /// Total filing matched your search criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Time took to execute your search query on our server, value in ms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("took", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Took { get; set; }

        /// <summary>
        /// Current search page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        /// <summary>
        /// Filing match your search criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilingResponse> Filings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilingResponse
    {
        /// <summary>
        /// Filing Id in Alpharesearch platform
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilingId { get; set; }

        /// <summary>
        /// Filing title
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Id of the entity submitted the filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilerId { get; set; }

        /// <summary>
        /// List of symbol associate with this filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Symbol { get; set; }

        /// <summary>
        /// Filer name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Date the filing is submitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptanceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptanceDate { get; set; }

        /// <summary>
        /// Date the filing is made available to the public
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FiledDate { get; set; }

        /// <summary>
        /// Date as which the filing is reported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportDate { get; set; }

        /// <summary>
        /// Filing Form
        /// </summary>
        [Newtonsoft.Json.JsonProperty("form", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Form { get; set; }

        /// <summary>
        /// Amendment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Amend { get; set; }

        /// <summary>
        /// Filing Source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>
        /// Estimate number of page when printing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageCount { get; set; }

        /// <summary>
        /// Number of document in this filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DocumentCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InFilingResponse
    {
        /// <summary>
        /// Filing Id in Alpharesearch platform
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilingId { get; set; }

        /// <summary>
        /// Filing title
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Id of the entity submitted the filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilerId { get; set; }

        /// <summary>
        /// List of symbol associate with this filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Symbol { get; set; }

        /// <summary>
        /// Filer name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Date the filing is submitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptanceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptanceDate { get; set; }

        /// <summary>
        /// Date the filing is make available to the public
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FiledDate { get; set; }

        /// <summary>
        /// Date as which the filing is reported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportDate { get; set; }

        /// <summary>
        /// Filing Form
        /// </summary>
        [Newtonsoft.Json.JsonProperty("form", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Form { get; set; }

        /// <summary>
        /// Amendment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Amend { get; set; }

        /// <summary>
        /// Filing Source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>
        /// Estimate number of page when printing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageCount { get; set; }

        /// <summary>
        /// Number of document in this filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DocumentCount { get; set; }

        /// <summary>
        /// Document for this filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocumentResponse> Documents { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentResponse
    {
        /// <summary>
        /// AlphaResearch internal document id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Title for this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Number of hit in this document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hits { get; set; }

        /// <summary>
        /// Link to render this document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Format of this document (can be html or pdf)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// Highlighted excerpts for this document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excerpts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExcerptResponse> Excerpts { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExcerptResponse
    {
        /// <summary>
        /// Highlighted content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Location of the content in the rendered document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snippetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnippetId { get; set; }

        /// <summary>
        /// Start offset of highlighted content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartOffset { get; set; }

        /// <summary>
        /// End offset of highlighted content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndOffset { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchFilter
    {
        /// <summary>
        /// Filter id, use with respective field in search query body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockSymbol
    {
        /// <summary>
        /// Symbol description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Display symbol name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displaySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplaySymbol { get; set; }

        /// <summary>
        /// Unique symbol used to identify this symbol used in &lt;code&gt;/stock/candle&lt;/code&gt; endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Security type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Primary exchange's MIC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mic { get; set; }

        /// <summary>
        /// FIGI identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Figi { get; set; }

        /// <summary>
        /// Global Share Class FIGI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareClassFIGI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareClassFIGI { get; set; }

        /// <summary>
        /// Price's currency. This might be different from the reporting currency of fundamental data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Alternative ticker for exchanges with multiple tickers for 1 stock such as BSE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol2 { get; set; }

        /// <summary>
        /// ISIN. This field is only available for EU stocks and selected Asian markets. Entitlement from Finnhub is required to access this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SymbolLookup
    {
        /// <summary>
        /// Array of search results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SymbolLookupInfo> Result { get; set; }

        /// <summary>
        /// Number of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SymbolLookupInfo
    {
        /// <summary>
        /// Symbol description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Display symbol name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displaySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplaySymbol { get; set; }

        /// <summary>
        /// Unique symbol used to identify this symbol used in &lt;code&gt;/stock/candle&lt;/code&gt; endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Security type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstitutionalPortfolio
    {
        /// <summary>
        /// Investor's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// CIK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Array of positions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InstitutionalPortfolioGroup> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketStatus
    {
        /// <summary>
        /// Exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        /// <summary>
        /// Timezone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        /// <summary>
        /// Market session. Can be 1 of the following values: &lt;code&gt;pre-market&lt;/code&gt;,&lt;code&gt;regular&lt;/code&gt;,&lt;code&gt;post-market&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if the market is closed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("session", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Session { get; set; }

        /// <summary>
        /// Holiday event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holiday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Holiday { get; set; }

        /// <summary>
        /// Whether the market is open at the moment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isOpen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOpen { get; set; }

        /// <summary>
        /// Current timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? T { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketHolidayData
    {
        /// <summary>
        /// Holiday's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventName { get; set; }

        /// <summary>
        /// Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AtDate { get; set; }

        /// <summary>
        /// Trading hours for this day if the market is partially closed only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tradingHour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TradingHour { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketHoliday
    {
        /// <summary>
        /// Timezone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        /// <summary>
        /// Exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        /// <summary>
        /// Array of holidays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MarketHolidayData> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyProfile
    {
        /// <summary>
        /// Company name alias.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Alias { get; set; }

        /// <summary>
        /// Address of company's headquarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// City of company's headquarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Country of company's headquarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Currency used in company filings and financials.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Currency used in Estimates data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimateCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstimateCurrency { get; set; }

        /// <summary>
        /// Currency used in market capitalization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCapCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketCapCurrency { get; set; }

        /// <summary>
        /// CUSIP number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusip { get; set; }

        /// <summary>
        /// Sedol number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sedol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sedol { get; set; }

        /// <summary>
        /// Company business summary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Listed exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        /// <summary>
        /// Industry group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ggroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ggroup { get; set; }

        /// <summary>
        /// Industry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gind { get; set; }

        /// <summary>
        /// Sector.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gsector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gsector { get; set; }

        /// <summary>
        /// Sub-industry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gsubind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gsubind { get; set; }

        /// <summary>
        /// ISIN number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>
        /// LEI number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lei", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lei { get; set; }

        /// <summary>
        /// Investor relations website.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IrUrl { get; set; }

        /// <summary>
        /// NAICS national industry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("naicsNationalIndustry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NaicsNationalIndustry { get; set; }

        /// <summary>
        /// NAICS industry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("naics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naics { get; set; }

        /// <summary>
        /// NAICS sector.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("naicsSector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NaicsSector { get; set; }

        /// <summary>
        /// NAICS subsector.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("naicsSubsector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NaicsSubsector { get; set; }

        /// <summary>
        /// Company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Company phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// State of company's headquarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Company symbol/ticker as used on the listed exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ticker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ticker { get; set; }

        /// <summary>
        /// Company website.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weburl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Weburl { get; set; }

        /// <summary>
        /// IPO date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Ipo { get; set; }

        /// <summary>
        /// Market Capitalization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCapitalization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? MarketCapitalization { get; set; }

        /// <summary>
        /// Number of oustanding shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareOutstanding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ShareOutstanding { get; set; }

        /// <summary>
        /// Number of employee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employeeTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EmployeeTotal { get; set; }

        /// <summary>
        /// Logo image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// Finnhub industry classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finnhubIndustry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinnhubIndustry { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyProfile2
    {
        /// <summary>
        /// Country of company's headquarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Currency used in company filings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Listed exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        /// <summary>
        /// Company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Company symbol/ticker as used on the listed exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ticker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ticker { get; set; }

        /// <summary>
        /// IPO date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Ipo { get; set; }

        /// <summary>
        /// Market Capitalization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCapitalization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? MarketCapitalization { get; set; }

        /// <summary>
        /// Number of oustanding shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareOutstanding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ShareOutstanding { get; set; }

        /// <summary>
        /// Logo image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// Company phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// Company website.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weburl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Weburl { get; set; }

        /// <summary>
        /// Finnhub industry classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finnhubIndustry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinnhubIndustry { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Company
    {
        /// <summary>
        /// Executive name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Age
        /// </summary>
        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Age { get; set; }

        /// <summary>
        /// Title
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Year first appointed as executive/director of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("since", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Since { get; set; }

        /// <summary>
        /// Sex
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sex { get; set; }

        /// <summary>
        /// Total compensation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Compensation { get; set; }

        /// <summary>
        /// Compensation currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyExecutive
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of company's executives and members of the Board.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("executive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Company> Executive { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketNews
    {
        /// <summary>
        /// News category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// Published time in UNIX timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Datetime { get; set; }

        /// <summary>
        /// News headline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }

        /// <summary>
        /// News ID. This value can be used for &lt;code&gt;minId&lt;/code&gt; params to get the latest news only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        /// <summary>
        /// Thumbnail image URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>
        /// Related stocks and companies mentioned in the article.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("related", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Related { get; set; }

        /// <summary>
        /// News source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>
        /// News summary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// URL of the original article.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyNews
    {
        /// <summary>
        /// News category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// Published time in UNIX timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Datetime { get; set; }

        /// <summary>
        /// News headline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }

        /// <summary>
        /// News ID. This value can be used for &lt;code&gt;minId&lt;/code&gt; params to get the latest news only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        /// <summary>
        /// Thumbnail image URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>
        /// Related stocks and companies mentioned in the article.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("related", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Related { get; set; }

        /// <summary>
        /// News source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>
        /// News summary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// URL of the original article.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Development
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Published time in &lt;code&gt;YYYY-MM-DD HH:MM:SS&lt;/code&gt; format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datetime { get; set; }

        /// <summary>
        /// Development headline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }

        /// <summary>
        /// Development description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PressRelease
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of major developments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("majorDevelopment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Development> MajorDevelopment { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyNewsStatistics
    {
        [Newtonsoft.Json.JsonProperty("articlesInLastWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ArticlesInLastWeek { get; set; }

        [Newtonsoft.Json.JsonProperty("buzz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Buzz { get; set; }

        [Newtonsoft.Json.JsonProperty("weeklyAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? WeeklyAverage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sentiment
    {
        [Newtonsoft.Json.JsonProperty("bearishPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? BearishPercent { get; set; }

        [Newtonsoft.Json.JsonProperty("bullishPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? BullishPercent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewsSentiment
    {
        /// <summary>
        /// Statistics of company news in the past week.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buzz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyNewsStatistics Buzz { get; set; }

        /// <summary>
        /// News score.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyNewsScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? CompanyNewsScore { get; set; }

        /// <summary>
        /// Sector average bullish percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sectorAverageBullishPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SectorAverageBullishPercent { get; set; }

        /// <summary>
        /// Sectore average score.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sectorAverageNewsScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SectorAverageNewsScore { get; set; }

        /// <summary>
        /// News sentiment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sentiment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sentiment Sentiment { get; set; }

        /// <summary>
        /// Requested symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetricSeriesMap
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetricMap
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceMetricMap
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BasicFinancials
    {
        /// <summary>
        /// Symbol of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Metric type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metricType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetricType { get; set; }

        /// <summary>
        /// Map key-value pair of time-series ratios.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetricSeriesMap Series { get; set; }

        /// <summary>
        /// Map key-value pair of key ratios and metrics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetricMap Metric { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceMetrics
    {
        /// <summary>
        /// Symbol of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Data date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AtDate { get; set; }

        /// <summary>
        /// Map key-value pair of key ratios and metrics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PriceMetricMap Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CongressionalTransaction
    {
        /// <summary>
        /// Transaction amount from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? AmountFrom { get; set; }

        /// <summary>
        /// Transaction amount to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? AmountTo { get; set; }

        /// <summary>
        /// Asset name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetName { get; set; }

        /// <summary>
        /// Filing date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilingDate { get; set; }

        /// <summary>
        /// Name of the representative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Owner Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerType { get; set; }

        /// <summary>
        /// Position.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Transaction date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionDate { get; set; }

        /// <summary>
        /// Transaction type &lt;code&gt;Sale&lt;/code&gt; or &lt;code&gt;Purchase&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CongressionalTrading
    {
        /// <summary>
        /// Symbol of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of stock trades.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CongressionalTransaction> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsinChangeInfo
    {
        /// <summary>
        /// Event's date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AtDate { get; set; }

        /// <summary>
        /// Old ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldIsin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldIsin { get; set; }

        /// <summary>
        /// New ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newIsin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewIsin { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsinChange
    {
        /// <summary>
        /// From date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromDate { get; set; }

        /// <summary>
        /// To date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToDate { get; set; }

        /// <summary>
        /// Array of ISIN change events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IsinChangeInfo> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SymbolChangeInfo
    {
        /// <summary>
        /// Event's date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AtDate { get; set; }

        /// <summary>
        /// Old symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldSymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldSymbol { get; set; }

        /// <summary>
        /// New symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newSymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewSymbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SymbolChange
    {
        /// <summary>
        /// From date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromDate { get; set; }

        /// <summary>
        /// To date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToDate { get; set; }

        /// <summary>
        /// Array of symbol change events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SymbolChangeInfo> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstitutionalPortfolioInfo
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// CUSIP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusip { get; set; }

        /// <summary>
        /// Position's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// &lt;code&gt;put&lt;/code&gt; or &lt;code&gt;call&lt;/code&gt; for options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("putCall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PutCall { get; set; }

        /// <summary>
        /// Number of shares change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Change { get; set; }

        /// <summary>
        /// Number of shares with no voting rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noVoting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? NoVoting { get; set; }

        /// <summary>
        /// Percentage of portfolio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Percentage { get; set; }

        /// <summary>
        /// Number of shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Share { get; set; }

        /// <summary>
        /// Number of shares with shared voting rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedVoting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SharedVoting { get; set; }

        /// <summary>
        /// Number of shares with sole voting rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("soleVoting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SoleVoting { get; set; }

        /// <summary>
        /// Position value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstitutionalPortfolioGroup
    {
        /// <summary>
        /// Report date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportDate { get; set; }

        /// <summary>
        /// Filing date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilingDate { get; set; }

        /// <summary>
        /// Array of positions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("portfolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InstitutionalPortfolioInfo> Portfolio { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstitutionalOwnershipInfo
    {
        /// <summary>
        /// Investor's company CIK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Firm's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// &lt;code&gt;put&lt;/code&gt; or &lt;code&gt;call&lt;/code&gt; for options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("putCall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PutCall { get; set; }

        /// <summary>
        /// Number of shares change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Change { get; set; }

        /// <summary>
        /// Number of shares with no voting rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noVoting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? NoVoting { get; set; }

        /// <summary>
        /// Percentage of portfolio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Percentage { get; set; }

        /// <summary>
        /// News score.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Share { get; set; }

        /// <summary>
        /// Number of shares with shared voting rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedVoting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SharedVoting { get; set; }

        /// <summary>
        /// Number of shares with sole voting rights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("soleVoting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SoleVoting { get; set; }

        /// <summary>
        /// Position value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstitutionalOwnershipGroup
    {
        /// <summary>
        /// Report date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportDate { get; set; }

        /// <summary>
        /// Array of institutional investors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InstitutionalOwnershipInfo> Ownership { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstitutionalOwnership
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Cusip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusip { get; set; }

        /// <summary>
        /// Array of institutional investors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InstitutionalOwnershipGroup> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstitutionalProfileInfo
    {
        /// <summary>
        /// Investor's company CIK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Firm type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firmType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirmType { get; set; }

        /// <summary>
        /// Manager.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager { get; set; }

        /// <summary>
        /// Investing philosophy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("philosophy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Philosophy { get; set; }

        /// <summary>
        /// Profile info.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Profile { get; set; }

        /// <summary>
        /// Profile image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileImg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfileImg { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstitutionalProfile
    {
        /// <summary>
        /// CIK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Array of investors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InstitutionalProfileInfo> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnershipInfo
    {
        /// <summary>
        /// Investor's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Number of shares held by the investor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Share { get; set; }

        /// <summary>
        /// Number of share changed (net buy or sell) from the last period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Change { get; set; }

        /// <summary>
        /// Filing date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? FilingDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ownership
    {
        /// <summary>
        /// Symbol of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of investors with detailed information about their holdings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OwnershipInfo> Ownership1 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundOwnershipInfo
    {
        /// <summary>
        /// Investor's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Number of shares held by the investor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Share { get; set; }

        /// <summary>
        /// Number of share changed (net buy or sell) from the last period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Change { get; set; }

        /// <summary>
        /// Filing date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? FilingDate { get; set; }

        /// <summary>
        /// Percent of the fund's portfolio comprised of the company's share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("portfolioPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? PortfolioPercent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundOwnership
    {
        /// <summary>
        /// Symbol of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of investors with detailed information about their holdings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FundOwnershipInfo> Ownership { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transactions
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Insider's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Number of shares held after the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Share { get; set; }

        /// <summary>
        /// Number of share changed from the last period. A positive value suggests a &lt;code&gt;BUY&lt;/code&gt; transaction. A negative value suggests a &lt;code&gt;SELL&lt;/code&gt; transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Change { get; set; }

        /// <summary>
        /// Filing date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? FilingDate { get; set; }

        /// <summary>
        /// Transaction date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Average transaction price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TransactionPrice { get; set; }

        /// <summary>
        /// Transaction code. A list of codes and their meanings can be found &lt;a href="https://www.sec.gov/about/forms/form4data.pdf" target="_blank" rel="noopener"&gt;here&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsiderTransactions
    {
        /// <summary>
        /// Symbol of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of insider transactions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transactions> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsiderSentimentsData
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Month.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Month { get; set; }

        /// <summary>
        /// Net buying/selling from all insiders' transactions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Change { get; set; }

        /// <summary>
        /// Monthly share purchase ratio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mspr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Mspr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsiderSentiments
    {
        /// <summary>
        /// Symbol of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of sentiment data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InsiderSentimentsData> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinancialMap
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinancialStatements
    {
        /// <summary>
        /// Symbol of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// An array of map of key, value pairs containing the data for each period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("financials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FinancialMap> Financials { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReportDataMap
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Report
    {
        /// <summary>
        /// Access number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessNumber { get; set; }

        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// CIK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Quarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

        /// <summary>
        /// Form type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("form", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Form { get; set; }

        /// <summary>
        /// Period start date &lt;code&gt;%Y-%m-%d %H:%M:%S&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartDate { get; set; }

        /// <summary>
        /// Period end date &lt;code&gt;%Y-%m-%d %H:%M:%S&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndDate { get; set; }

        /// <summary>
        /// Filed date &lt;code&gt;%Y-%m-%d %H:%M:%S&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FiledDate { get; set; }

        /// <summary>
        /// Accepted date &lt;code&gt;%Y-%m-%d %H:%M:%S&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptedDate { get; set; }

        /// <summary>
        /// Report data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("report", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReportDataMap Report1 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinancialsAsReported
    {
        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// CIK
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Array of filings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Report> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BreakdownItemMap
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BreakdownItem
    {
        /// <summary>
        /// Access number of the report from which the data is sourced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessNumber { get; set; }

        /// <summary>
        /// Revenue breakdown.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("breakdown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BreakdownItemMap Breakdown { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevenueBreakdown
    {
        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// CIK
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Array of revenue breakdown over multiple periods.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BreakdownItem> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevenueBreakdown2
    {
        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Revenue breakdown data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Filing
    {
        /// <summary>
        /// Access number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessNumber { get; set; }

        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// CIK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Form type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("form", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Form { get; set; }

        /// <summary>
        /// Filed date &lt;code&gt;%Y-%m-%d %H:%M:%S&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FiledDate { get; set; }

        /// <summary>
        /// Accepted date &lt;code&gt;%Y-%m-%d %H:%M:%S&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptedDate { get; set; }

        /// <summary>
        /// Report's URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportUrl { get; set; }

        /// <summary>
        /// Filing's URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilingUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternationalFiling
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Filed date &lt;code&gt;%Y-%m-%d %H:%M:%S&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FiledDate { get; set; }

        /// <summary>
        /// Category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// Document's title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Document's description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Url.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>
        /// Country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilingSentiment
    {
        /// <summary>
        /// % of negative words in the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Negative { get; set; }

        /// <summary>
        /// % of positive words in the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Positive { get; set; }

        /// <summary>
        /// % of polarity words in the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("polarity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Polarity { get; set; }

        /// <summary>
        /// % of litigious words in the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("litigious", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Litigious { get; set; }

        /// <summary>
        /// % of uncertainty words in the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uncertainty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Uncertainty { get; set; }

        /// <summary>
        /// % of constraining words in the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("constraining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Constraining { get; set; }

        /// <summary>
        /// % of modal-weak words in the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modal-weak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ModalWeak { get; set; }

        /// <summary>
        /// % of modal-strong words in the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modal-strong", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ModalStrong { get; set; }

        /// <summary>
        /// % of modal-moderate words in the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modal-moderate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ModalModerate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SECSentimentAnalysis
    {
        /// <summary>
        /// Access number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessNumber { get; set; }

        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// CIK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Filing Sentiment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sentiment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilingSentiment Sentiment { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimilarityIndexInfo
    {
        /// <summary>
        /// CIK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Cosine similarity of Item 1 (Business). This number is only available for Annual reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Item1 { get; set; }

        /// <summary>
        /// Cosine similarity of Item 1A (Risk Factors). This number is available for both Annual and Quarterly reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item1a", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Item1a { get; set; }

        /// <summary>
        /// Cosine similarity of Item 2 (Management’s Discussion and Analysis of Financial Condition and Results of Operations). This number is only available for Quarterly reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Item2 { get; set; }

        /// <summary>
        /// Cosine similarity of Item 7 (Management’s Discussion and Analysis of Financial Condition and Results of Operations). This number is only available for Annual reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Item7 { get; set; }

        /// <summary>
        /// Cosine similarity of Item 7A (Quantitative and Qualitative Disclosures About Market Risk). This number is only available for Annual reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item7a", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Item7a { get; set; }

        /// <summary>
        /// Access number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessNumber { get; set; }

        /// <summary>
        /// Form type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("form", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Form { get; set; }

        /// <summary>
        /// Filed date &lt;code&gt;%Y-%m-%d %H:%M:%S&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FiledDate { get; set; }

        /// <summary>
        /// Accepted date &lt;code&gt;%Y-%m-%d %H:%M:%S&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptedDate { get; set; }

        /// <summary>
        /// Report's URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportUrl { get; set; }

        /// <summary>
        /// Filing's URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilingUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimilarityIndex
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// CIK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cik", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cik { get; set; }

        /// <summary>
        /// Array of filings with its cosine similarity compared to the same report of the previous year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("similarity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SimilarityIndexInfo> Similarity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IPOEvent
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// IPO date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// Exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        /// <summary>
        /// Company's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// IPO status. Can take 1 of the following values: &lt;code&gt;expected&lt;/code&gt;,&lt;code&gt;priced&lt;/code&gt;,&lt;code&gt;withdrawn&lt;/code&gt;,&lt;code&gt;filed&lt;/code&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Projected price or price range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price { get; set; }

        /// <summary>
        /// Number of shares offered during the IPO.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfShares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? NumberOfShares { get; set; }

        /// <summary>
        /// Total shares value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSharesValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TotalSharesValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IPOCalendar
    {
        /// <summary>
        /// Array of IPO events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipoCalendar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IPOEvent> IpoCalendar { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dividends
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Ex-Dividend date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// Amount in local currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Amount { get; set; }

        /// <summary>
        /// Adjusted dividend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adjustedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? AdjustedAmount { get; set; }

        /// <summary>
        /// Pay date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? PayDate { get; set; }

        /// <summary>
        /// Record date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? RecordDate { get; set; }

        /// <summary>
        /// Declaration date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declarationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? DeclarationDate { get; set; }

        /// <summary>
        /// Currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// &lt;p&gt;Dividend frequency. Can be 1 of the following values:&lt;/p&gt;&lt;ul&gt;
        /// <br/>&lt;li&gt;&lt;code&gt;0: Annually&lt;/code&gt;&lt;/li&gt;
        /// <br/>&lt;li&gt;&lt;code&gt;1: Monthly&lt;/code&gt;&lt;/li&gt;
        /// <br/>&lt;li&gt;&lt;code&gt;2: Quarterly&lt;/code&gt;&lt;/li&gt;
        /// <br/>&lt;li&gt;&lt;code&gt;3: Semi-annually&lt;/code&gt;&lt;/li&gt;
        /// <br/>&lt;li&gt;&lt;code&gt;4: Other/Unknown&lt;/code&gt;&lt;/li&gt;
        /// <br/>&lt;li&gt;&lt;code&gt;5: Bimonthly&lt;/code&gt;&lt;/li&gt;
        /// <br/>&lt;li&gt;&lt;code&gt;6: Trimesterly&lt;/code&gt;&lt;/li&gt;
        /// <br/>&lt;li&gt;&lt;code&gt;7: Weekly&lt;/code&gt;&lt;/li&gt;
        /// <br/>&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Freq { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dividends2Info
    {
        /// <summary>
        /// Ex-Dividend date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ExDate { get; set; }

        /// <summary>
        /// Amount in local currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecommendationTrend
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Number of recommendations that fall into the Buy category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Buy { get; set; }

        /// <summary>
        /// Number of recommendations that fall into the Hold category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Hold { get; set; }

        /// <summary>
        /// Updated period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Period { get; set; }

        /// <summary>
        /// Number of recommendations that fall into the Sell category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Sell { get; set; }

        /// <summary>
        /// Number of recommendations that fall into the Strong Buy category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("strongBuy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StrongBuy { get; set; }

        /// <summary>
        /// Number of recommendations that fall into the Strong Sell category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("strongSell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StrongSell { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceTarget
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Highes analysts' target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetHigh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TargetHigh { get; set; }

        /// <summary>
        /// Lowest analysts' target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetLow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TargetLow { get; set; }

        /// <summary>
        /// Mean of all analysts' targets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetMean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TargetMean { get; set; }

        /// <summary>
        /// Median of all analysts' targets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetMedian", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TargetMedian { get; set; }

        /// <summary>
        /// Number of Analysts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberAnalysts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumberAnalysts { get; set; }

        /// <summary>
        /// Updated time of the data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastUpdated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpgradeDowngrade
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Upgrade/downgrade time in UNIX timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradeTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GradeTime { get; set; }

        /// <summary>
        /// From grade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromGrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromGrade { get; set; }

        /// <summary>
        /// To grade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toGrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToGrade { get; set; }

        /// <summary>
        /// Company/analyst who did the upgrade/downgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }

        /// <summary>
        /// Action can take any of the following values: &lt;code&gt;up(upgrade), down(downgrade), main(maintains), init(initiate), reit(reiterate)&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevenueEstimatesInfo
    {
        /// <summary>
        /// Average revenue estimates including Finnhub's proprietary estimates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueAvg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? RevenueAvg { get; set; }

        /// <summary>
        /// Highest estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueHigh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? RevenueHigh { get; set; }

        /// <summary>
        /// Lowest estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueLow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? RevenueLow { get; set; }

        /// <summary>
        /// Number of Analysts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberAnalysts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumberAnalysts { get; set; }

        /// <summary>
        /// Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Period { get; set; }

        /// <summary>
        /// Fiscal year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Fiscal quarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevenueEstimates
    {
        /// <summary>
        /// List of estimates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RevenueEstimatesInfo> Data { get; set; }

        /// <summary>
        /// Frequency: annual or quarterly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Freq { get; set; }

        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EbitdaEstimatesInfo
    {
        /// <summary>
        /// Average EBITDA estimates including Finnhub's proprietary estimates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ebitdaAvg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EbitdaAvg { get; set; }

        /// <summary>
        /// Highest estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ebitdaHigh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EbitdaHigh { get; set; }

        /// <summary>
        /// Lowest estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ebitdaLow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EbitdaLow { get; set; }

        /// <summary>
        /// Number of Analysts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberAnalysts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumberAnalysts { get; set; }

        /// <summary>
        /// Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Period { get; set; }

        /// <summary>
        /// Fiscal year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Fiscal quarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EbitdaEstimates
    {
        /// <summary>
        /// List of estimates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EbitdaEstimatesInfo> Data { get; set; }

        /// <summary>
        /// Frequency: annual or quarterly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Freq { get; set; }

        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EbitEstimatesInfo
    {
        /// <summary>
        /// Average EBIT estimates including Finnhub's proprietary estimates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ebitAvg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EbitAvg { get; set; }

        /// <summary>
        /// Highest estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ebitHigh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EbitHigh { get; set; }

        /// <summary>
        /// Lowest estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ebitLow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EbitLow { get; set; }

        /// <summary>
        /// Number of Analysts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberAnalysts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumberAnalysts { get; set; }

        /// <summary>
        /// Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Period { get; set; }

        /// <summary>
        /// Fiscal year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Fiscal quarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EbitEstimates
    {
        /// <summary>
        /// List of estimates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EbitEstimatesInfo> Data { get; set; }

        /// <summary>
        /// Frequency: annual or quarterly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Freq { get; set; }

        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EarningsEstimatesInfo
    {
        /// <summary>
        /// Average EPS estimates including Finnhub's proprietary estimates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("epsAvg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EpsAvg { get; set; }

        /// <summary>
        /// Highest estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("epsHigh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EpsHigh { get; set; }

        /// <summary>
        /// Lowest estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("epsLow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EpsLow { get; set; }

        /// <summary>
        /// Number of Analysts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberAnalysts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumberAnalysts { get; set; }

        /// <summary>
        /// Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Period { get; set; }

        /// <summary>
        /// Fiscal year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Fiscal quarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EarningsEstimates
    {
        /// <summary>
        /// List of estimates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EarningsEstimatesInfo> Data { get; set; }

        /// <summary>
        /// Frequency: annual or quarterly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Freq { get; set; }

        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EarningResult
    {
        /// <summary>
        /// Actual earning result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Actual { get; set; }

        /// <summary>
        /// Estimated earning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Estimate { get; set; }

        /// <summary>
        /// Surprise - The difference between actual and estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surprise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Surprise { get; set; }

        /// <summary>
        /// Surprise percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surprisePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SurprisePercent { get; set; }

        /// <summary>
        /// Reported period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Period { get; set; }

        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Fiscal year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Fiscal quarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EarningRelease
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// Indicates whether the earnings is announced before market open(&lt;code&gt;bmo&lt;/code&gt;), after market close(&lt;code&gt;amc&lt;/code&gt;), or during market hour(&lt;code&gt;dmh&lt;/code&gt;).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hour { get; set; }

        /// <summary>
        /// Earnings year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Earnings quarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

        /// <summary>
        /// EPS estimate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("epsEstimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EpsEstimate { get; set; }

        /// <summary>
        /// EPS actual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("epsActual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EpsActual { get; set; }

        /// <summary>
        /// Revenue estimate including Finnhub's proprietary estimates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueEstimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? RevenueEstimate { get; set; }

        /// <summary>
        /// Revenue actual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueActual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? RevenueActual { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EarningsCalendar
    {
        /// <summary>
        /// Array of earnings release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earningsCalendar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EarningRelease> EarningsCalendar1 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EarningsCallLiveResult
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Event name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event { get; set; }

        /// <summary>
        /// Date time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

        /// <summary>
        /// Earnings year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Earnings quarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

        /// <summary>
        /// Live audio streaming file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("liveAudio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LiveAudio { get; set; }

        /// <summary>
        /// Recoding in mp3 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recording", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recording { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EarningsCallLive
    {
        /// <summary>
        /// Array of earnings call events that support live streaming.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EarningsCallLiveResult> Event { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Quote
    {
        /// <summary>
        /// Open price of the day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? O { get; set; }

        /// <summary>
        /// High price of the day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? H { get; set; }

        /// <summary>
        /// Low price of the day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("l", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? L { get; set; }

        /// <summary>
        /// Current price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? C { get; set; }

        /// <summary>
        /// Previous close price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Pc { get; set; }

        /// <summary>
        /// Change
        /// </summary>
        [Newtonsoft.Json.JsonProperty("d", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? D { get; set; }

        /// <summary>
        /// Percent change
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Dp { get; set; }

        /// <summary>
        /// Unix timestamp of the quote
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? T { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockCandles
    {
        /// <summary>
        /// List of open prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> O { get; set; }

        /// <summary>
        /// List of high prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> H { get; set; }

        /// <summary>
        /// List of low prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("l", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> L { get; set; }

        /// <summary>
        /// List of close prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> C { get; set; }

        /// <summary>
        /// List of volume data for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("v", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> V { get; set; }

        /// <summary>
        /// List of timestamp for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> T { get; set; }

        /// <summary>
        /// Status of the response. This field can either be ok or no_data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string S { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TickData
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string S { get; set; }

        /// <summary>
        /// Number of ticks skipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Skip { get; set; }

        /// <summary>
        /// Number of ticks returned. If &lt;code&gt;count&lt;/code&gt; &lt; &lt;code&gt;limit&lt;/code&gt;, all data for that date has been returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Total number of ticks for that date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        /// <summary>
        /// List of volume data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("v", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> V { get; set; }

        /// <summary>
        /// List of price data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("p", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> P { get; set; }

        /// <summary>
        /// List of timestamp in UNIX ms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> T { get; set; }

        /// <summary>
        /// List of venues/exchanges. A list of exchange codes can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing",&gt;here&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> X { get; set; }

        /// <summary>
        /// List of trade conditions. A comprehensive list of trade conditions code can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1PUxiSWPHSODbaTaoL2Vef6DgU-yFtlRGZf19oBb9Hp0/edit?usp=sharing"&gt;here&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<string>> C { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BondTickData
    {
        /// <summary>
        /// Number of ticks skipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Skip { get; set; }

        /// <summary>
        /// Number of ticks returned. If &lt;code&gt;count&lt;/code&gt; &lt; &lt;code&gt;limit&lt;/code&gt;, all data for that date has been returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Total number of ticks for that date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        /// <summary>
        /// List of volume data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("v", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> V { get; set; }

        /// <summary>
        /// List of price data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("p", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> P { get; set; }

        /// <summary>
        /// List of yield data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> Y { get; set; }

        /// <summary>
        /// List of timestamp in UNIX ms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> T { get; set; }

        /// <summary>
        /// List of values showing the side (Buy/sell) of each trade. List of supported values: &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing",&gt;here&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("si", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Si { get; set; }

        /// <summary>
        /// List of values showing the counterparty of each trade. List of supported values: &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing",&gt;here&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Cp { get; set; }

        /// <summary>
        /// List of values showing the reporting party of each trade. List of supported values: &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing",&gt;here&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Rp { get; set; }

        /// <summary>
        /// ATS flag. Y or empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ats { get; set; }

        /// <summary>
        /// List of trade conditions. A comprehensive list of trade conditions code can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing"&gt;here&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<string>> C { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoricalNBBO
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string S { get; set; }

        /// <summary>
        /// Number of ticks skipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Skip { get; set; }

        /// <summary>
        /// Number of ticks returned. If &lt;code&gt;count&lt;/code&gt; &lt; &lt;code&gt;limit&lt;/code&gt;, all data for that date has been returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

        /// <summary>
        /// Total number of ticks for that date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        /// <summary>
        /// List of Ask volume data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("av", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> Av { get; set; }

        /// <summary>
        /// List of Ask price data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> A { get; set; }

        /// <summary>
        /// List of venues/exchanges - Ask price. A list of exchange codes can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing",&gt;here&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ax { get; set; }

        /// <summary>
        /// List of Bid volume data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> Bv { get; set; }

        /// <summary>
        /// List of Bid price data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> B { get; set; }

        /// <summary>
        /// List of venues/exchanges - Bid price. A list of exchange codes can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing",&gt;here&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Bx { get; set; }

        /// <summary>
        /// List of timestamp in UNIX ms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> T { get; set; }

        /// <summary>
        /// List of quote conditions. A comprehensive list of quote conditions code can be found &lt;a target="_blank" href="https://docs.google.com/spreadsheets/d/1iiA6e7Osdtai0oPMOUzgAIKXCsay89dFDmsegz6OpEg/edit?usp=sharing"&gt;here&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<string>> C { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LastBidAsk
    {
        /// <summary>
        /// Bid price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? B { get; set; }

        /// <summary>
        /// Ask price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? A { get; set; }

        /// <summary>
        /// Bid volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Bv { get; set; }

        /// <summary>
        /// Ask volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("av", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Av { get; set; }

        /// <summary>
        /// Reference UNIX timestamp in ms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? T { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Split
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Split date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// From factor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FromFactor { get; set; }

        /// <summary>
        /// To factor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ToFactor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dividends2
    {
        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Dividends2Info> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndicesConstituents
    {
        /// <summary>
        /// Index's symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of constituents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("constituents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Constituents { get; set; }

        /// <summary>
        /// Array of constituents' details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("constituentsBreakdown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IndicesConstituentsBreakdown> ConstituentsBreakdown { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndicesConstituentsBreakdown
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>
        /// Cusip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusip { get; set; }

        /// <summary>
        /// Global Share Class FIGI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareClassFIGI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareClassFIGI { get; set; }

        /// <summary>
        /// Weight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Weight { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndexHistoricalConstituent
    {
        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// &lt;code&gt;add&lt;/code&gt; or &lt;code&gt;remove&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        /// <summary>
        /// Date of joining or leaving the index.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Date { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndicesHistoricalConstituents
    {
        /// <summary>
        /// Index's symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of historical constituents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historicalConstituents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IndexHistoricalConstituent> HistoricalConstituents { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETFProfileData
    {
        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Asset Class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetClass { get; set; }

        /// <summary>
        /// Investment Segment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("investmentSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvestmentSegment { get; set; }

        /// <summary>
        /// AUM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Aum { get; set; }

        /// <summary>
        /// NAV.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nav", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Nav { get; set; }

        /// <summary>
        /// NAV currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NavCurrency { get; set; }

        /// <summary>
        /// Expense ratio. For non-US funds, this is the &lt;a href="https://www.esma.europa.eu/sites/default/files/library/2015/11/09_1028_final_kid_ongoing_charges_methodology_for_publication_u_2_.pdf" target="_blank"&gt;KID ongoing charges&lt;a/&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expenseRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ExpenseRatio { get; set; }

        /// <summary>
        /// Tracking Index.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingIndex { get; set; }

        /// <summary>
        /// ETF issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etfCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EtfCompany { get; set; }

        /// <summary>
        /// ETF domicile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domicile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domicile { get; set; }

        /// <summary>
        /// Inception date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inceptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? InceptionDate { get; set; }

        /// <summary>
        /// ETF's website.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Website { get; set; }

        /// <summary>
        /// Logo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>
        /// CUSIP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusip { get; set; }

        /// <summary>
        /// P/E.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priceToEarnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? PriceToEarnings { get; set; }

        /// <summary>
        /// P/B.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priceToBook", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? PriceToBook { get; set; }

        /// <summary>
        /// 30-day average volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avgVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? AvgVolume { get; set; }

        /// <summary>
        /// ETF's description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the ETF is inverse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isInverse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInverse { get; set; }

        /// <summary>
        /// Whether the ETF is leveraged
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLeveraged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLeveraged { get; set; }

        /// <summary>
        /// Leverage factor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leverageFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? LeverageFactor { get; set; }

        /// <summary>
        /// Dividend yield.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dividendYield", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? DividendYield { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETFsProfile
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Profile data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ETFProfileData Profile { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETFHoldingsData
    {
        /// <summary>
        /// Symbol description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Security name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>
        /// CUSIP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusip { get; set; }

        /// <summary>
        /// Number of shares owned by the ETF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Share { get; set; }

        /// <summary>
        /// Portfolio's percent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Percent { get; set; }

        /// <summary>
        /// Market value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Value { get; set; }

        /// <summary>
        /// Asset type. Can be 1 of the following values: &lt;code&gt;Equity&lt;/code&gt;, &lt;code&gt;ETP&lt;/code&gt;, &lt;code&gt;Fund&lt;/code&gt;, &lt;code&gt;Bond&lt;/code&gt;, &lt;code&gt;Other&lt;/code&gt; or empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETFsHoldings
    {
        /// <summary>
        /// ETF symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Holdings update date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? AtDate { get; set; }

        /// <summary>
        /// Number of holdings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfHoldings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumberOfHoldings { get; set; }

        /// <summary>
        /// Array of holdings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holdings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ETFHoldingsData> Holdings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETFSectorExposureData
    {
        /// <summary>
        /// Industry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("industry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Industry { get; set; }

        /// <summary>
        /// Percent of exposure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Exposure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETFsSectorExposure
    {
        /// <summary>
        /// ETF symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of industries and exposure levels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sectorExposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ETFSectorExposureData> SectorExposure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETFCountryExposureData
    {
        /// <summary>
        /// Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Percent of exposure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Exposure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETFsCountryExposure
    {
        /// <summary>
        /// ETF symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of countries and and exposure levels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryExposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ETFCountryExposureData> CountryExposure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundProfileData
    {
        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Fund's category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// Investment Segment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("investmentSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvestmentSegment { get; set; }

        /// <summary>
        /// NAV.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNav", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TotalNav { get; set; }

        /// <summary>
        /// Expense ratio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expenseRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ExpenseRatio { get; set; }

        /// <summary>
        /// Index benchmark.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benchmark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Benchmark { get; set; }

        /// <summary>
        /// Inception date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inceptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? InceptionDate { get; set; }

        /// <summary>
        /// Fund's description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Fund Family.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fundFamily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FundFamily { get; set; }

        /// <summary>
        /// Fund Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fundCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FundCompany { get; set; }

        /// <summary>
        /// Fund's managers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager { get; set; }

        /// <summary>
        /// Status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Beta.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Beta { get; set; }

        /// <summary>
        /// Deferred load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deferredLoad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? DeferredLoad { get; set; }

        /// <summary>
        /// 12B-1 fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee12b1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Fee12b1 { get; set; }

        /// <summary>
        /// Front Load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontLoad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FrontLoad { get; set; }

        /// <summary>
        /// IRA minimum investment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iraMinInvestment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? IraMinInvestment { get; set; }

        /// <summary>
        /// ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>
        /// CUSIP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusip { get; set; }

        /// <summary>
        /// Max redemption fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxRedemptionFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? MaxRedemptionFee { get; set; }

        /// <summary>
        /// Minimum investment for standard accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("standardMinInvestment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? StandardMinInvestment { get; set; }

        /// <summary>
        /// Turnover.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turnover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Turnover { get; set; }

        /// <summary>
        /// Fund's series ID. This field can be used to group multiple share classes into 1 unique fund.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seriesId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeriesId { get; set; }

        /// <summary>
        /// Fund's series name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seriesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeriesName { get; set; }

        /// <summary>
        /// Class ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassId { get; set; }

        /// <summary>
        /// Class name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("className", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassName { get; set; }

        /// <summary>
        /// SFDR classification for EU funds. Under the new classifications, a fund's strategy will labeled under either Article 6, 8 or 9. Article 6 covers funds which do not integrate any kind of sustainability into the investment process. Article 8, also known as ‘environmental and socially promoting’, applies “… where a financial product promotes, among other characteristics, environmental or social characteristics, or a combination of those characteristics, provided that the companies in which the investments are made follow good governance practices.”. Article 9, also known as ‘products targeting sustainable investments’, covers products targeting bespoke sustainable investments and applies “… where a financial product has sustainable investment as its objective and an index has been designated as a reference benchmark.”
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sfdrClassification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SfdrClassification { get; set; }

        /// <summary>
        /// Fund's currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundProfile
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Profile data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MutualFundProfileData Profile { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundHoldingsData
    {
        /// <summary>
        /// Symbol description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Security name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>
        /// CUSIP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusip { get; set; }

        /// <summary>
        /// Number of shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Share { get; set; }

        /// <summary>
        /// Portfolio's percent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Percent { get; set; }

        /// <summary>
        /// Market value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Value { get; set; }

        /// <summary>
        /// Asset type. Can be 1 of the following values: &lt;code&gt;Equity&lt;/code&gt;, &lt;code&gt;ETP&lt;/code&gt;, &lt;code&gt;Fund&lt;/code&gt;, &lt;code&gt;Bond&lt;/code&gt;, &lt;code&gt;Other&lt;/code&gt; or empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundHoldings
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Holdings update date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? AtDate { get; set; }

        /// <summary>
        /// Number of holdings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfHoldings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumberOfHoldings { get; set; }

        /// <summary>
        /// Array of holdings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holdings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MutualFundHoldingsData> Holdings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundSectorExposureData
    {
        /// <summary>
        /// Sector
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sector { get; set; }

        /// <summary>
        /// Percent of exposure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Exposure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundSectorExposure
    {
        /// <summary>
        /// Mutual symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of sector and exposure levels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sectorExposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MutualFundSectorExposureData> SectorExposure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundCountryExposureData
    {
        /// <summary>
        /// Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Percent of exposure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Exposure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundCountryExposure
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of countries and and exposure levels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryExposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MutualFundCountryExposureData> CountryExposure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundEetData
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundEet
    {
        /// <summary>
        /// ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>
        /// EET data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MutualFundEetData Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundEetPaiData
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MutualFundEetPai
    {
        /// <summary>
        /// ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>
        /// EET data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MutualFundEetPaiData Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForexSymbol
    {
        /// <summary>
        /// Symbol description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Display symbol name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displaySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplaySymbol { get; set; }

        /// <summary>
        /// Unique symbol used to identify this symbol used in &lt;code&gt;/forex/candle&lt;/code&gt; endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForexCandles
    {
        /// <summary>
        /// List of open prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> O { get; set; }

        /// <summary>
        /// List of high prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> H { get; set; }

        /// <summary>
        /// List of low prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("l", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> L { get; set; }

        /// <summary>
        /// List of close prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> C { get; set; }

        /// <summary>
        /// List of volume data for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("v", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> V { get; set; }

        /// <summary>
        /// List of timestamp for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> T { get; set; }

        /// <summary>
        /// Status of the response. This field can either be ok or no_data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string S { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForexRate
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Forexrates
    {
        /// <summary>
        /// Base currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base { get; set; }

        /// <summary>
        /// A map of base/quote rates for all currency pair.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForexRate Quote { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CryptoSymbol
    {
        /// <summary>
        /// Symbol description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Display symbol name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displaySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplaySymbol { get; set; }

        /// <summary>
        /// Unique symbol used to identify this symbol used in &lt;code&gt;/crypto/candle&lt;/code&gt; endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CryptoProfile
    {
        /// <summary>
        /// Long name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongName { get; set; }

        /// <summary>
        /// Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Project's website.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Website { get; set; }

        /// <summary>
        /// Market capitalization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? MarketCap { get; set; }

        /// <summary>
        /// Total supply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSupply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TotalSupply { get; set; }

        /// <summary>
        /// Max supply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxSupply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? MaxSupply { get; set; }

        /// <summary>
        /// Circulating supply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("circulatingSupply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? CirculatingSupply { get; set; }

        /// <summary>
        /// Logo image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// Launch date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("launchDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LaunchDate { get; set; }

        /// <summary>
        /// Proof type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proofType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProofType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CryptoCandles
    {
        /// <summary>
        /// List of open prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> O { get; set; }

        /// <summary>
        /// List of high prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> H { get; set; }

        /// <summary>
        /// List of low prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("l", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> L { get; set; }

        /// <summary>
        /// List of close prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> C { get; set; }

        /// <summary>
        /// List of volume data for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("v", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> V { get; set; }

        /// <summary>
        /// List of timestamp for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> T { get; set; }

        /// <summary>
        /// Status of the response. This field can either be ok or no_data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string S { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScanPattern
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatternRecognition
    {
        /// <summary>
        /// Array of patterns.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScanPattern> Points { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportResistance
    {
        /// <summary>
        /// Array of support and resistance levels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> Levels { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Indicator
    {
        /// <summary>
        /// Number of buy signals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Buy { get; set; }

        /// <summary>
        /// Number of neutral signals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("neutral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Neutral { get; set; }

        /// <summary>
        /// Number of sell signals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Sell { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TechnicalAnalysis
    {
        /// <summary>
        /// Number of indicators for each signal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Indicator Count { get; set; }

        /// <summary>
        /// Aggregate Signal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Trend
    {
        /// <summary>
        /// ADX reading
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Adx { get; set; }

        /// <summary>
        /// Whether market is trending or going sideway
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trending", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Trending { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateIndicators
    {
        /// <summary>
        /// Number of indicator signals strong buy, buy, neutral, sell, strong sell signals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("technicalAnalysis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TechnicalAnalysis TechnicalAnalysis { get; set; }

        /// <summary>
        /// Whether the market is trending.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Trend Trend { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TechnicalIndicator
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndicatorFields
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockTranscripts
    {
        /// <summary>
        /// Transcript's ID used to get the &lt;a href="#transcripts"&gt;full transcript&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Time of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

        /// <summary>
        /// Year of earnings result in the case of earnings call transcript.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Quarter of earnings result in the case of earnings call transcript.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EarningsCallTranscriptsList
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of transcripts' metadata
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transcripts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StockTranscripts> Transcripts { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TranscriptContent
    {
        /// <summary>
        /// Speaker's name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Speaker's speech
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speech", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Speech { get; set; }

        /// <summary>
        /// Earnings calls section (management discussion or Q&amp;A)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("session", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Session { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TranscriptParticipant
    {
        /// <summary>
        /// Participant's name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Participant's description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the speak is a company's executive or an analyst
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EarningsCallTranscripts
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Transcript content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transcript", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TranscriptContent> Transcript { get; set; }

        /// <summary>
        /// Participant list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("participant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TranscriptParticipant> Participant { get; set; }

        /// <summary>
        /// Audio link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Audio { get; set; }

        /// <summary>
        /// Transcript's ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Time of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

        /// <summary>
        /// Year of earnings result in the case of earnings call transcript.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Quarter of earnings result in the case of earnings call transcript.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PresentationData
    {
        /// <summary>
        /// Quarter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

        /// <summary>
        /// Year
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Presentation url
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Title
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// At Time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AtTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockPresentation
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Presentation data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PresentationData> Res { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SentimentContent
    {
        /// <summary>
        /// Number of mentions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Mention { get; set; }

        /// <summary>
        /// Number of positive mentions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positiveMention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PositiveMention { get; set; }

        /// <summary>
        /// Number of negative mentions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negativeMention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NegativeMention { get; set; }

        /// <summary>
        /// Positive score. Range 0-1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positiveScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? PositiveScore { get; set; }

        /// <summary>
        /// Negative score. Range 0-1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negativeScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? NegativeScore { get; set; }

        /// <summary>
        /// Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative
        /// </summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Score { get; set; }

        /// <summary>
        /// Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AtTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SocialSentiment
    {
        /// <summary>
        /// Company symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Sentiment data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SentimentContent> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvestmentThemePortfolio
    {
        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvestmentThemes
    {
        /// <summary>
        /// Investment theme
        /// </summary>
        [Newtonsoft.Json.JsonProperty("theme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Theme { get; set; }

        /// <summary>
        /// Investment theme portfolio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvestmentThemePortfolio> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SectorMetric
    {
        /// <summary>
        /// Region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// Metrics for each sector.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SectorMetricData> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SectorMetricData
    {
        /// <summary>
        /// Sector
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sector { get; set; }

        /// <summary>
        /// Metrics data in key-value format. &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; fields are for average and median respectively.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metrics { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyCustomersSuppliers
    {
        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Industry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("industry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Industry { get; set; }

        /// <summary>
        /// Whether the company is a customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Customer { get; set; }

        /// <summary>
        /// Whether the company is a supplier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Supplier { get; set; }

        /// <summary>
        /// 1-month price correlation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oneMonthCorrelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? OneMonthCorrelation { get; set; }

        /// <summary>
        /// 1-year price correlation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oneYearCorrelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? OneYearCorrelation { get; set; }

        /// <summary>
        /// 6-month price correlation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sixMonthCorrelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SixMonthCorrelation { get; set; }

        /// <summary>
        /// 3-month price correlation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeMonthCorrelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? ThreeMonthCorrelation { get; set; }

        /// <summary>
        /// 2-week price correlation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twoWeekCorrelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TwoWeekCorrelation { get; set; }

        /// <summary>
        /// 2-year price correlation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twoYearCorrelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TwoYearCorrelation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupplyChainRelationships
    {
        /// <summary>
        /// symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Key customers and suppliers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<KeyCustomersSuppliers> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoricalCompanyESG
    {
        /// <summary>
        /// symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Historical ESG data points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompanyESG2> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyESG2
    {
        /// <summary>
        /// Total ESG Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalESGScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TotalESGScore { get; set; }

        /// <summary>
        /// Environment Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environmentScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EnvironmentScore { get; set; }

        /// <summary>
        /// Governance Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("governanceScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? GovernanceScore { get; set; }

        /// <summary>
        /// Social Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SocialScore { get; set; }

        /// <summary>
        /// Map key-value pair of key ESG data points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyESGMap Data { get; set; }

        /// <summary>
        /// Period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Period { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyESG
    {
        /// <summary>
        /// symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Total ESG Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalESGScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TotalESGScore { get; set; }

        /// <summary>
        /// Environment Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environmentScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EnvironmentScore { get; set; }

        /// <summary>
        /// Governance Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("governanceScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? GovernanceScore { get; set; }

        /// <summary>
        /// Social Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? SocialScore { get; set; }

        /// <summary>
        /// Map key-value pair of key ESG data points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyESGMap Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyESGMap
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyEarningsQualityScore
    {
        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Frequency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Freq { get; set; }

        /// <summary>
        /// Array of earnings quality score.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompanyEarningsQualityScoreData> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyEarningsQualityScoreData
    {
        /// <summary>
        /// Period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Period { get; set; }

        /// <summary>
        /// Growth Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("growth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Growth { get; set; }

        /// <summary>
        /// Profitability Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profitability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Profitability { get; set; }

        /// <summary>
        /// Cash Generation and Capital Allocation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashGenerationCapitalAllocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? CashGenerationCapitalAllocation { get; set; }

        /// <summary>
        /// Leverage Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Leverage { get; set; }

        /// <summary>
        /// Total Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Score { get; set; }

        /// <summary>
        /// Letter Score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("letterScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LetterScore { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CovidInfo
    {
        /// <summary>
        /// State.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Number of confirmed cases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("case", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Case { get; set; }

        /// <summary>
        /// Number of confirmed deaths.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("death", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Death { get; set; }

        /// <summary>
        /// Updated time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FDAComitteeMeeting
    {
        /// <summary>
        /// Start time of the event in EST.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromDate { get; set; }

        /// <summary>
        /// End time of the event in EST.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToDate { get; set; }

        /// <summary>
        /// Event's description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventDescription { get; set; }

        /// <summary>
        /// URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CountryMetadata
    {
        /// <summary>
        /// Country name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Alpha 2 code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code2 { get; set; }

        /// <summary>
        /// Alpha 3 code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code3 { get; set; }

        /// <summary>
        /// UN code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeNo { get; set; }

        /// <summary>
        /// Currency name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Currency code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Region
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// Sub-Region
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubRegion { get; set; }

        /// <summary>
        /// Moody's credit risk rating.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rating { get; set; }

        /// <summary>
        /// Default spread
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultSpread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? DefaultSpread { get; set; }

        /// <summary>
        /// Country risk premium
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryRiskPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? CountryRiskPremium { get; set; }

        /// <summary>
        /// Equity risk premium
        /// </summary>
        [Newtonsoft.Json.JsonProperty("equityRiskPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? EquityRiskPremium { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EconomicEvent
    {
        /// <summary>
        /// Actual release
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Actual { get; set; }

        /// <summary>
        /// Previous release
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Prev { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        /// <summary>
        /// Estimate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Estimate { get; set; }

        /// <summary>
        /// Event
        /// </summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event { get; set; }

        /// <summary>
        /// Impact level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("impact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Impact { get; set; }

        /// <summary>
        /// Release time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EconomicCalendar
    {
        /// <summary>
        /// Array of economic events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("economicCalendar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EconomicEvent> EconomicCalendar1 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EconomicCode
    {
        /// <summary>
        /// Finnhub economic code used to get historical data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Indicator name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EconomicDataInfo
    {
        /// <summary>
        /// Date of the reading
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EconomicData
    {
        /// <summary>
        /// Array of economic data for requested code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EconomicDataInfo> Data { get; set; }

        /// <summary>
        /// Finnhub economic code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketCapData
    {
        /// <summary>
        /// Date of the reading
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AtDate { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCapitalization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? MarketCapitalization { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoricalMarketCapData
    {
        /// <summary>
        /// Array of market data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MarketCapData> Data { get; set; }

        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployeeCount
    {
        /// <summary>
        /// Date of the reading
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AtDate { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Employee { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoricalEmployeeCount
    {
        /// <summary>
        /// Array of market data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmployeeCount> Data { get; set; }

        /// <summary>
        /// Symbol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AirlinePriceIndex
    {
        /// <summary>
        /// Date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        /// <summary>
        /// Price Index
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priceIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? PriceIndex { get; set; }

        /// <summary>
        /// Daily average ticket price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyAvgPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? DailyAvgPrice { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AirlinePriceIndexData
    {
        /// <summary>
        /// Array of price index.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AirlinePriceIndex> Data { get; set; }

        /// <summary>
        /// Airline name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("airline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Airline { get; set; }

        /// <summary>
        /// From date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// To date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BondYieldCurveInfo
    {
        /// <summary>
        /// Date of the reading
        /// </summary>
        [Newtonsoft.Json.JsonProperty("d", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string D { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("v", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? V { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BondYieldCurve
    {
        /// <summary>
        /// Array of data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BondYieldCurveInfo> Data { get; set; }

        /// <summary>
        /// Bond's code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsptoPatentResult
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of patents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UsptoPatent> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsptoPatent
    {
        /// <summary>
        /// Application Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationNumber { get; set; }

        /// <summary>
        /// Array of companies' name on the patent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyFilingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CompanyFilingName { get; set; }

        /// <summary>
        /// Filing date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilingDate { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Filing status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilingStatus { get; set; }

        /// <summary>
        /// Patent number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("patentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PatentNumber { get; set; }

        /// <summary>
        /// Publication date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicationDate { get; set; }

        /// <summary>
        /// Patent's type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("patentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PatentType { get; set; }

        /// <summary>
        /// URL of the original article.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VisaApplicationResult
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of H1b and Permanent visa applications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VisaApplication> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LobbyingResult
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of lobbying activities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LobbyingData> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsaSpendingResult
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Array of government's spending data points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UsaSpending> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsaSpending
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Company's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientName { get; set; }

        /// <summary>
        /// Company's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientParentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientParentName { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AwardDescription { get; set; }

        /// <summary>
        /// Recipient's country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionDate { get; set; }

        /// <summary>
        /// Income reported by lobbying firms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? TotalValue { get; set; }

        /// <summary>
        /// Performance start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceStartDate { get; set; }

        /// <summary>
        /// Performance end date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceEndDate { get; set; }

        /// <summary>
        /// Award agency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardingAgencyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AwardingAgencyName { get; set; }

        /// <summary>
        /// Award sub-agency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardingSubAgencyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AwardingSubAgencyName { get; set; }

        /// <summary>
        /// Award office name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardingOfficeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AwardingOfficeName { get; set; }

        /// <summary>
        /// Performance country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceCountry { get; set; }

        /// <summary>
        /// Performance city.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceCity { get; set; }

        /// <summary>
        /// Performance county.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceCounty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceCounty { get; set; }

        /// <summary>
        /// Performance state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceState { get; set; }

        /// <summary>
        /// Performance zip code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceZipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceZipCode { get; set; }

        /// <summary>
        /// Performance congressional district.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceCongressionalDistrict", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceCongressionalDistrict { get; set; }

        /// <summary>
        /// NAICS code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("naicsCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NaicsCode { get; set; }

        /// <summary>
        /// Permalink.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permalink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permalink { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LobbyingData
    {
        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Company's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Period { get; set; }

        /// <summary>
        /// Income reported by lobbying firms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("income", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Income { get; set; }

        /// <summary>
        /// Expenses reported by the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Expenses { get; set; }

        /// <summary>
        /// Document's URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentUrl { get; set; }

        /// <summary>
        /// Posted name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostedName { get; set; }

        /// <summary>
        /// Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        /// <summary>
        /// Client ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        /// <summary>
        /// Registrant ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registrantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrantId { get; set; }

        /// <summary>
        /// Senate ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenateId { get; set; }

        /// <summary>
        /// House registrant ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("houseregistrantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseregistrantId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BondProfile
    {
        /// <summary>
        /// ISIN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isin { get; set; }

        /// <summary>
        /// Cusip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cusip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cusip { get; set; }

        /// <summary>
        /// FIGI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("figi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Figi { get; set; }

        /// <summary>
        /// Coupon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coupon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Coupon { get; set; }

        /// <summary>
        /// Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaturityDate { get; set; }

        /// <summary>
        /// Offering price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offeringPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? OfferingPrice { get; set; }

        /// <summary>
        /// Issue date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueDate { get; set; }

        /// <summary>
        /// Bond type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bondType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BondType { get; set; }

        /// <summary>
        /// Bond type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debtType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebtType { get; set; }

        /// <summary>
        /// Industry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("industryGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustryGroup { get; set; }

        /// <summary>
        /// Sub-Industry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("industrySubGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustrySubGroup { get; set; }

        /// <summary>
        /// Asset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Asset { get; set; }

        /// <summary>
        /// Asset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetType { get; set; }

        /// <summary>
        /// Dated date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("datedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatedDate { get; set; }

        /// <summary>
        /// First coupon date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstCouponDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstCouponDate { get; set; }

        /// <summary>
        /// Offering amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalOffering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? OriginalOffering { get; set; }

        /// <summary>
        /// Outstanding amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountOutstanding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? AmountOutstanding { get; set; }

        /// <summary>
        /// Payment frequency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentFrequency { get; set; }

        /// <summary>
        /// Security level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecurityLevel { get; set; }

        /// <summary>
        /// Callable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("callable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Callable { get; set; }

        /// <summary>
        /// Coupon type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("couponType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CouponType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BondCandles
    {
        /// <summary>
        /// List of close prices for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<float> C { get; set; }

        /// <summary>
        /// List of timestamp for returned candles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> T { get; set; }

        /// <summary>
        /// Status of the response. This field can either be ok or no_data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("s", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string S { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VisaApplication
    {
        /// <summary>
        /// Year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Year { get; set; }

        /// <summary>
        /// Quarter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quarter { get; set; }

        /// <summary>
        /// Symbol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <summary>
        /// Case number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNumber { get; set; }

        /// <summary>
        /// Case status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caseStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseStatus { get; set; }

        /// <summary>
        /// Received date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivedDate { get; set; }

        /// <summary>
        /// Visa class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VisaClass { get; set; }

        /// <summary>
        /// Job Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jobTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JobTitle { get; set; }

        /// <summary>
        /// SOC Code. A list of SOC code can be found &lt;a href="https://www.bls.gov/oes/current/oes_stru.htm" target="_blank"&gt;here&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocCode { get; set; }

        /// <summary>
        /// Full-time position flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullTimePosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullTimePosition { get; set; }

        /// <summary>
        /// Job's start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beginDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeginDate { get; set; }

        /// <summary>
        /// Job's end date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndDate { get; set; }

        /// <summary>
        /// Company's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployerName { get; set; }

        /// <summary>
        /// Worksite address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worksiteAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorksiteAddress { get; set; }

        /// <summary>
        /// Worksite city.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worksiteCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorksiteCity { get; set; }

        /// <summary>
        /// Worksite county.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worksiteCounty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorksiteCounty { get; set; }

        /// <summary>
        /// Worksite state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worksiteState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorksiteState { get; set; }

        /// <summary>
        /// Worksite postal code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worksitePostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorksitePostalCode { get; set; }

        /// <summary>
        /// Wage range from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageRangeFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? WageRangeFrom { get; set; }

        /// <summary>
        /// Wage range to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageRangeTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? WageRangeTo { get; set; }

        /// <summary>
        /// Wage unit of pay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageUnitOfPay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WageUnitOfPay { get; set; }

        /// <summary>
        /// Wage level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WageLevel { get; set; }

        /// <summary>
        /// H1B dependent flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("h1bDependent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string H1bDependent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinnhubAPIClientException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public FinnhubAPIClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinnhubAPIClientException<TResult> : FinnhubAPIClientException
    {
        public TResult Result { get; private set; }

        public FinnhubAPIClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625